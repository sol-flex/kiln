/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ContractAbiResponseDto } from '../models';
import { ParameterWithValueList } from '../models';
import { ReadCallFunctionDto } from '../models';
import { WriteCallFunctionDto } from '../models';
import { WriteCallFunctionResponseDto } from '../models';
/**
 * ContractInteractionsApi - axios parameter creator
 * @export
 */
export declare const ContractInteractionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Return deployed contract\'s ABI by blockchain native asset id and contract address
     * @summary Return deployed contract\'s ABI
     * @param {string} contractAddress The contract\&#39;s onchain address
     * @param {string} baseAssetId
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeployedContractAbi: (contractAddress: string, baseAssetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Call a read function on a deployed contract by blockchain native asset id and contract address
     * @summary Call a read function on a deployed contract
     * @param {ReadCallFunctionDto} readCallFunctionDto
     * @param {string} contractAddress The contract\&#39;s onchain address
     * @param {string} baseAssetId
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCallFunction: (readCallFunctionDto: ReadCallFunctionDto, contractAddress: string, baseAssetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Call a write function on a deployed contract by blockchain native asset id and contract address. This creates an onchain transaction, thus it is an async operation. It returns a transaction id that can be polled for status check
     * @summary Call a write function on a deployed contract
     * @param {WriteCallFunctionDto} writeCallFunctionDto
     * @param {string} contractAddress The contract\&#39;s onchain address
     * @param {string} baseAssetId
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    writeCallFunction: (writeCallFunctionDto: WriteCallFunctionDto, contractAddress: string, baseAssetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ContractInteractionsApi - functional programming interface
 * @export
 */
export declare const ContractInteractionsApiFp: (configuration?: Configuration) => {
    /**
     * Return deployed contract\'s ABI by blockchain native asset id and contract address
     * @summary Return deployed contract\'s ABI
     * @param {string} contractAddress The contract\&#39;s onchain address
     * @param {string} baseAssetId
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeployedContractAbi(contractAddress: string, baseAssetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractAbiResponseDto>>;
    /**
     * Call a read function on a deployed contract by blockchain native asset id and contract address
     * @summary Call a read function on a deployed contract
     * @param {ReadCallFunctionDto} readCallFunctionDto
     * @param {string} contractAddress The contract\&#39;s onchain address
     * @param {string} baseAssetId
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCallFunction(readCallFunctionDto: ReadCallFunctionDto, contractAddress: string, baseAssetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParameterWithValueList>>;
    /**
     * Call a write function on a deployed contract by blockchain native asset id and contract address. This creates an onchain transaction, thus it is an async operation. It returns a transaction id that can be polled for status check
     * @summary Call a write function on a deployed contract
     * @param {WriteCallFunctionDto} writeCallFunctionDto
     * @param {string} contractAddress The contract\&#39;s onchain address
     * @param {string} baseAssetId
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    writeCallFunction(writeCallFunctionDto: WriteCallFunctionDto, contractAddress: string, baseAssetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WriteCallFunctionResponseDto>>;
};
/**
 * ContractInteractionsApi - factory interface
 * @export
 */
export declare const ContractInteractionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Return deployed contract\'s ABI by blockchain native asset id and contract address
     * @summary Return deployed contract\'s ABI
     * @param {ContractInteractionsApiGetDeployedContractAbiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeployedContractAbi(requestParameters: ContractInteractionsApiGetDeployedContractAbiRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContractAbiResponseDto>;
    /**
     * Call a read function on a deployed contract by blockchain native asset id and contract address
     * @summary Call a read function on a deployed contract
     * @param {ContractInteractionsApiReadCallFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCallFunction(requestParameters: ContractInteractionsApiReadCallFunctionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ParameterWithValueList>;
    /**
     * Call a write function on a deployed contract by blockchain native asset id and contract address. This creates an onchain transaction, thus it is an async operation. It returns a transaction id that can be polled for status check
     * @summary Call a write function on a deployed contract
     * @param {ContractInteractionsApiWriteCallFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    writeCallFunction(requestParameters: ContractInteractionsApiWriteCallFunctionRequest, options?: RawAxiosRequestConfig): AxiosPromise<WriteCallFunctionResponseDto>;
};
/**
 * Request parameters for getDeployedContractAbi operation in ContractInteractionsApi.
 * @export
 * @interface ContractInteractionsApiGetDeployedContractAbiRequest
 */
export interface ContractInteractionsApiGetDeployedContractAbiRequest {
    /**
     * The contract\&#39;s onchain address
     * @type {string}
     * @memberof ContractInteractionsApiGetDeployedContractAbi
     */
    readonly contractAddress: string;
    /**
     *
     * @type {string}
     * @memberof ContractInteractionsApiGetDeployedContractAbi
     */
    readonly baseAssetId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ContractInteractionsApiGetDeployedContractAbi
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for readCallFunction operation in ContractInteractionsApi.
 * @export
 * @interface ContractInteractionsApiReadCallFunctionRequest
 */
export interface ContractInteractionsApiReadCallFunctionRequest {
    /**
     *
     * @type {ReadCallFunctionDto}
     * @memberof ContractInteractionsApiReadCallFunction
     */
    readonly readCallFunctionDto: ReadCallFunctionDto;
    /**
     * The contract\&#39;s onchain address
     * @type {string}
     * @memberof ContractInteractionsApiReadCallFunction
     */
    readonly contractAddress: string;
    /**
     *
     * @type {string}
     * @memberof ContractInteractionsApiReadCallFunction
     */
    readonly baseAssetId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ContractInteractionsApiReadCallFunction
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for writeCallFunction operation in ContractInteractionsApi.
 * @export
 * @interface ContractInteractionsApiWriteCallFunctionRequest
 */
export interface ContractInteractionsApiWriteCallFunctionRequest {
    /**
     *
     * @type {WriteCallFunctionDto}
     * @memberof ContractInteractionsApiWriteCallFunction
     */
    readonly writeCallFunctionDto: WriteCallFunctionDto;
    /**
     * The contract\&#39;s onchain address
     * @type {string}
     * @memberof ContractInteractionsApiWriteCallFunction
     */
    readonly contractAddress: string;
    /**
     *
     * @type {string}
     * @memberof ContractInteractionsApiWriteCallFunction
     */
    readonly baseAssetId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ContractInteractionsApiWriteCallFunction
     */
    readonly idempotencyKey?: string;
}
/**
 * ContractInteractionsApi - object-oriented interface
 * @export
 * @class ContractInteractionsApi
 * @extends {BaseAPI}
 */
export declare class ContractInteractionsApi extends BaseAPI {
    /**
     * Return deployed contract\'s ABI by blockchain native asset id and contract address
     * @summary Return deployed contract\'s ABI
     * @param {ContractInteractionsApiGetDeployedContractAbiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractInteractionsApi
     */
    getDeployedContractAbi(requestParameters: ContractInteractionsApiGetDeployedContractAbiRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ContractAbiResponseDto>>;
    /**
     * Call a read function on a deployed contract by blockchain native asset id and contract address
     * @summary Call a read function on a deployed contract
     * @param {ContractInteractionsApiReadCallFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractInteractionsApi
     */
    readCallFunction(requestParameters: ContractInteractionsApiReadCallFunctionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ParameterWithValueList>>;
    /**
     * Call a write function on a deployed contract by blockchain native asset id and contract address. This creates an onchain transaction, thus it is an async operation. It returns a transaction id that can be polled for status check
     * @summary Call a write function on a deployed contract
     * @param {ContractInteractionsApiWriteCallFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractInteractionsApi
     */
    writeCallFunction(requestParameters: ContractInteractionsApiWriteCallFunctionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<WriteCallFunctionResponseDto>>;
}
