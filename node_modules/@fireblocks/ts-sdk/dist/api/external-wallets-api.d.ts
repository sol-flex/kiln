/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddAssetToExternalWalletRequest } from '../models';
import { CreateWalletRequest } from '../models';
import { ExternalWalletAsset } from '../models';
import { GetExternalWalletsResponse } from '../models';
import { SetCustomerRefIdRequest } from '../models';
import { UnmanagedWallet } from '../models';
/**
 * ExternalWalletsApi - axios parameter creator
 * @export
 */
export declare const ExternalWalletsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds an asset to an existing external wallet.
     * @summary Add an asset to an external wallet.
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to add
     * @param {AddAssetToExternalWalletRequest} [addAssetToExternalWalletRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAssetToExternalWallet: (walletId: string, assetId: string, addAssetToExternalWalletRequest?: AddAssetToExternalWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new external wallet with the requested name.
     * @summary Create an external wallet
     * @param {CreateWalletRequest} [createWalletRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalWallet: (createWalletRequest?: CreateWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an external wallet by ID.
     * @summary Delete an external wallet
     * @param {string} walletId The ID of the wallet to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExternalWallet: (walletId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns an external wallet by ID.
     * @summary Find an external wallet
     * @param {string} walletId The ID of the wallet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWallet: (walletId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns an external wallet by wallet ID and asset ID.
     * @summary Get an asset from an external wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWalletAsset: (walletId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of external wallets under the workspace.
     * @summary List external wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWallets: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an external wallet asset by ID.
     * @summary Delete an asset from an external wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAssetFromExternalWallet: (walletId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets an AML/KYT customer reference ID for the specific external wallet.
     * @summary Set an AML customer reference ID for an external wallet
     * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
     * @param {string} walletId The wallet ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setExternalWalletCustomerRefId: (setCustomerRefIdRequest: SetCustomerRefIdRequest, walletId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExternalWalletsApi - functional programming interface
 * @export
 */
export declare const ExternalWalletsApiFp: (configuration?: Configuration) => {
    /**
     * Adds an asset to an existing external wallet.
     * @summary Add an asset to an external wallet.
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to add
     * @param {AddAssetToExternalWalletRequest} [addAssetToExternalWalletRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAssetToExternalWallet(walletId: string, assetId: string, addAssetToExternalWalletRequest?: AddAssetToExternalWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>>;
    /**
     * Creates a new external wallet with the requested name.
     * @summary Create an external wallet
     * @param {CreateWalletRequest} [createWalletRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalWallet(createWalletRequest?: CreateWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>>;
    /**
     * Deletes an external wallet by ID.
     * @summary Delete an external wallet
     * @param {string} walletId The ID of the wallet to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExternalWallet(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns an external wallet by ID.
     * @summary Find an external wallet
     * @param {string} walletId The ID of the wallet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWallet(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>>;
    /**
     * Returns an external wallet by wallet ID and asset ID.
     * @summary Get an asset from an external wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWalletAsset(walletId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>>;
    /**
     * Gets a list of external wallets under the workspace.
     * @summary List external wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWallets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExternalWalletsResponse>>;
    /**
     * Deletes an external wallet asset by ID.
     * @summary Delete an asset from an external wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAssetFromExternalWallet(walletId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets an AML/KYT customer reference ID for the specific external wallet.
     * @summary Set an AML customer reference ID for an external wallet
     * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
     * @param {string} walletId The wallet ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setExternalWalletCustomerRefId(setCustomerRefIdRequest: SetCustomerRefIdRequest, walletId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ExternalWalletsApi - factory interface
 * @export
 */
export declare const ExternalWalletsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds an asset to an existing external wallet.
     * @summary Add an asset to an external wallet.
     * @param {ExternalWalletsApiAddAssetToExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAssetToExternalWallet(requestParameters: ExternalWalletsApiAddAssetToExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExternalWalletAsset>;
    /**
     * Creates a new external wallet with the requested name.
     * @summary Create an external wallet
     * @param {ExternalWalletsApiCreateExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalWallet(requestParameters?: ExternalWalletsApiCreateExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet>;
    /**
     * Deletes an external wallet by ID.
     * @summary Delete an external wallet
     * @param {ExternalWalletsApiDeleteExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExternalWallet(requestParameters: ExternalWalletsApiDeleteExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns an external wallet by ID.
     * @summary Find an external wallet
     * @param {ExternalWalletsApiGetExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWallet(requestParameters: ExternalWalletsApiGetExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet>;
    /**
     * Returns an external wallet by wallet ID and asset ID.
     * @summary Get an asset from an external wallet
     * @param {ExternalWalletsApiGetExternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWalletAsset(requestParameters: ExternalWalletsApiGetExternalWalletAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExternalWalletAsset>;
    /**
     * Gets a list of external wallets under the workspace.
     * @summary List external wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExternalWallets(options?: RawAxiosRequestConfig): AxiosPromise<GetExternalWalletsResponse>;
    /**
     * Deletes an external wallet asset by ID.
     * @summary Delete an asset from an external wallet
     * @param {ExternalWalletsApiRemoveAssetFromExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAssetFromExternalWallet(requestParameters: ExternalWalletsApiRemoveAssetFromExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets an AML/KYT customer reference ID for the specific external wallet.
     * @summary Set an AML customer reference ID for an external wallet
     * @param {ExternalWalletsApiSetExternalWalletCustomerRefIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setExternalWalletCustomerRefId(requestParameters: ExternalWalletsApiSetExternalWalletCustomerRefIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for addAssetToExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiAddAssetToExternalWalletRequest
 */
export interface ExternalWalletsApiAddAssetToExternalWalletRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly walletId: string;
    /**
     * The ID of the asset to add
     * @type {string}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly assetId: string;
    /**
     *
     * @type {AddAssetToExternalWalletRequest}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly addAssetToExternalWalletRequest?: AddAssetToExternalWalletRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiCreateExternalWalletRequest
 */
export interface ExternalWalletsApiCreateExternalWalletRequest {
    /**
     *
     * @type {CreateWalletRequest}
     * @memberof ExternalWalletsApiCreateExternalWallet
     */
    readonly createWalletRequest?: CreateWalletRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExternalWalletsApiCreateExternalWallet
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for deleteExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiDeleteExternalWalletRequest
 */
export interface ExternalWalletsApiDeleteExternalWalletRequest {
    /**
     * The ID of the wallet to delete
     * @type {string}
     * @memberof ExternalWalletsApiDeleteExternalWallet
     */
    readonly walletId: string;
}
/**
 * Request parameters for getExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiGetExternalWalletRequest
 */
export interface ExternalWalletsApiGetExternalWalletRequest {
    /**
     * The ID of the wallet to return
     * @type {string}
     * @memberof ExternalWalletsApiGetExternalWallet
     */
    readonly walletId: string;
}
/**
 * Request parameters for getExternalWalletAsset operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiGetExternalWalletAssetRequest
 */
export interface ExternalWalletsApiGetExternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof ExternalWalletsApiGetExternalWalletAsset
     */
    readonly walletId: string;
    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof ExternalWalletsApiGetExternalWalletAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for removeAssetFromExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiRemoveAssetFromExternalWalletRequest
 */
export interface ExternalWalletsApiRemoveAssetFromExternalWalletRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof ExternalWalletsApiRemoveAssetFromExternalWallet
     */
    readonly walletId: string;
    /**
     * The ID of the asset to delete
     * @type {string}
     * @memberof ExternalWalletsApiRemoveAssetFromExternalWallet
     */
    readonly assetId: string;
}
/**
 * Request parameters for setExternalWalletCustomerRefId operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiSetExternalWalletCustomerRefIdRequest
 */
export interface ExternalWalletsApiSetExternalWalletCustomerRefIdRequest {
    /**
     *
     * @type {SetCustomerRefIdRequest}
     * @memberof ExternalWalletsApiSetExternalWalletCustomerRefId
     */
    readonly setCustomerRefIdRequest: SetCustomerRefIdRequest;
    /**
     * The wallet ID
     * @type {string}
     * @memberof ExternalWalletsApiSetExternalWalletCustomerRefId
     */
    readonly walletId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExternalWalletsApiSetExternalWalletCustomerRefId
     */
    readonly idempotencyKey?: string;
}
/**
 * ExternalWalletsApi - object-oriented interface
 * @export
 * @class ExternalWalletsApi
 * @extends {BaseAPI}
 */
export declare class ExternalWalletsApi extends BaseAPI {
    /**
     * Adds an asset to an existing external wallet.
     * @summary Add an asset to an external wallet.
     * @param {ExternalWalletsApiAddAssetToExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    addAssetToExternalWallet(requestParameters: ExternalWalletsApiAddAssetToExternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ExternalWalletAsset>>;
    /**
     * Creates a new external wallet with the requested name.
     * @summary Create an external wallet
     * @param {ExternalWalletsApiCreateExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    createExternalWallet(requestParameters?: ExternalWalletsApiCreateExternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<UnmanagedWallet>>;
    /**
     * Deletes an external wallet by ID.
     * @summary Delete an external wallet
     * @param {ExternalWalletsApiDeleteExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    deleteExternalWallet(requestParameters: ExternalWalletsApiDeleteExternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Returns an external wallet by ID.
     * @summary Find an external wallet
     * @param {ExternalWalletsApiGetExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    getExternalWallet(requestParameters: ExternalWalletsApiGetExternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<UnmanagedWallet>>;
    /**
     * Returns an external wallet by wallet ID and asset ID.
     * @summary Get an asset from an external wallet
     * @param {ExternalWalletsApiGetExternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    getExternalWalletAsset(requestParameters: ExternalWalletsApiGetExternalWalletAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ExternalWalletAsset>>;
    /**
     * Gets a list of external wallets under the workspace.
     * @summary List external wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    getExternalWallets(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetExternalWalletsResponse>>;
    /**
     * Deletes an external wallet asset by ID.
     * @summary Delete an asset from an external wallet
     * @param {ExternalWalletsApiRemoveAssetFromExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    removeAssetFromExternalWallet(requestParameters: ExternalWalletsApiRemoveAssetFromExternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Sets an AML/KYT customer reference ID for the specific external wallet.
     * @summary Set an AML customer reference ID for an external wallet
     * @param {ExternalWalletsApiSetExternalWalletCustomerRefIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    setExternalWalletCustomerRefId(requestParameters: ExternalWalletsApiSetExternalWalletCustomerRefIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
}
