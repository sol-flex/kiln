/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddContractAssetRequest } from '../models';
import { CreateContractRequest } from '../models';
import { ExternalWalletAsset } from '../models';
import { GetContractsResponse } from '../models';
import { UnmanagedWallet } from '../models';
/**
 * ContractsApi - axios parameter creator
 * @export
 */
export declare const ContractsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds an asset to an existing contract.
     * @summary Add an asset to a contract
     * @param {string} contractId The ID of the contract
     * @param {string} assetId The ID of the asset to add
     * @param {AddContractAssetRequest} [addContractAssetRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractAsset: (contractId: string, assetId: string, addContractAssetRequest?: AddContractAssetRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new contract.
     * @summary Create a contract
     * @param {CreateContractRequest} [createContractRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContract: (createContractRequest?: CreateContractRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a contract by ID.
     * @summary Delete a contract
     * @param {string} contractId The ID of the contract to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContract: (contractId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a contract asset by ID.
     * @summary Delete a contract asset
     * @param {string} contractId The ID of the contract
     * @param {string} assetId The ID of the asset to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractAsset: (contractId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a contract by ID.
     * @summary Find a specific contract
     * @param {string} contractId The ID of the contract to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContract: (contractId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a contract asset by ID.
     * @summary Find a contract asset
     * @param {string} contractId The ID of the contract
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractAsset: (contractId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of contracts.
     * @summary List contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContracts: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ContractsApi - functional programming interface
 * @export
 */
export declare const ContractsApiFp: (configuration?: Configuration) => {
    /**
     * Adds an asset to an existing contract.
     * @summary Add an asset to a contract
     * @param {string} contractId The ID of the contract
     * @param {string} assetId The ID of the asset to add
     * @param {AddContractAssetRequest} [addContractAssetRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractAsset(contractId: string, assetId: string, addContractAssetRequest?: AddContractAssetRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>>;
    /**
     * Creates a new contract.
     * @summary Create a contract
     * @param {CreateContractRequest} [createContractRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContract(createContractRequest?: CreateContractRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>>;
    /**
     * Deletes a contract by ID.
     * @summary Delete a contract
     * @param {string} contractId The ID of the contract to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContract(contractId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a contract asset by ID.
     * @summary Delete a contract asset
     * @param {string} contractId The ID of the contract
     * @param {string} assetId The ID of the asset to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractAsset(contractId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a contract by ID.
     * @summary Find a specific contract
     * @param {string} contractId The ID of the contract to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContract(contractId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>>;
    /**
     * Returns a contract asset by ID.
     * @summary Find a contract asset
     * @param {string} contractId The ID of the contract
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractAsset(contractId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>>;
    /**
     * Gets a list of contracts.
     * @summary List contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContracts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContractsResponse>>;
};
/**
 * ContractsApi - factory interface
 * @export
 */
export declare const ContractsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds an asset to an existing contract.
     * @summary Add an asset to a contract
     * @param {ContractsApiAddContractAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractAsset(requestParameters: ContractsApiAddContractAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExternalWalletAsset>;
    /**
     * Creates a new contract.
     * @summary Create a contract
     * @param {ContractsApiCreateContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContract(requestParameters?: ContractsApiCreateContractRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet>;
    /**
     * Deletes a contract by ID.
     * @summary Delete a contract
     * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContract(requestParameters: ContractsApiDeleteContractRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes a contract asset by ID.
     * @summary Delete a contract asset
     * @param {ContractsApiDeleteContractAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractAsset(requestParameters: ContractsApiDeleteContractAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns a contract by ID.
     * @summary Find a specific contract
     * @param {ContractsApiGetContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContract(requestParameters: ContractsApiGetContractRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet>;
    /**
     * Returns a contract asset by ID.
     * @summary Find a contract asset
     * @param {ContractsApiGetContractAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractAsset(requestParameters: ContractsApiGetContractAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExternalWalletAsset>;
    /**
     * Gets a list of contracts.
     * @summary List contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContracts(options?: RawAxiosRequestConfig): AxiosPromise<GetContractsResponse>;
};
/**
 * Request parameters for addContractAsset operation in ContractsApi.
 * @export
 * @interface ContractsApiAddContractAssetRequest
 */
export interface ContractsApiAddContractAssetRequest {
    /**
     * The ID of the contract
     * @type {string}
     * @memberof ContractsApiAddContractAsset
     */
    readonly contractId: string;
    /**
     * The ID of the asset to add
     * @type {string}
     * @memberof ContractsApiAddContractAsset
     */
    readonly assetId: string;
    /**
     *
     * @type {AddContractAssetRequest}
     * @memberof ContractsApiAddContractAsset
     */
    readonly addContractAssetRequest?: AddContractAssetRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ContractsApiAddContractAsset
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createContract operation in ContractsApi.
 * @export
 * @interface ContractsApiCreateContractRequest
 */
export interface ContractsApiCreateContractRequest {
    /**
     *
     * @type {CreateContractRequest}
     * @memberof ContractsApiCreateContract
     */
    readonly createContractRequest?: CreateContractRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ContractsApiCreateContract
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for deleteContract operation in ContractsApi.
 * @export
 * @interface ContractsApiDeleteContractRequest
 */
export interface ContractsApiDeleteContractRequest {
    /**
     * The ID of the contract to delete
     * @type {string}
     * @memberof ContractsApiDeleteContract
     */
    readonly contractId: string;
}
/**
 * Request parameters for deleteContractAsset operation in ContractsApi.
 * @export
 * @interface ContractsApiDeleteContractAssetRequest
 */
export interface ContractsApiDeleteContractAssetRequest {
    /**
     * The ID of the contract
     * @type {string}
     * @memberof ContractsApiDeleteContractAsset
     */
    readonly contractId: string;
    /**
     * The ID of the asset to delete
     * @type {string}
     * @memberof ContractsApiDeleteContractAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for getContract operation in ContractsApi.
 * @export
 * @interface ContractsApiGetContractRequest
 */
export interface ContractsApiGetContractRequest {
    /**
     * The ID of the contract to return
     * @type {string}
     * @memberof ContractsApiGetContract
     */
    readonly contractId: string;
}
/**
 * Request parameters for getContractAsset operation in ContractsApi.
 * @export
 * @interface ContractsApiGetContractAssetRequest
 */
export interface ContractsApiGetContractAssetRequest {
    /**
     * The ID of the contract
     * @type {string}
     * @memberof ContractsApiGetContractAsset
     */
    readonly contractId: string;
    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof ContractsApiGetContractAsset
     */
    readonly assetId: string;
}
/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export declare class ContractsApi extends BaseAPI {
    /**
     * Adds an asset to an existing contract.
     * @summary Add an asset to a contract
     * @param {ContractsApiAddContractAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    addContractAsset(requestParameters: ContractsApiAddContractAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ExternalWalletAsset>>;
    /**
     * Creates a new contract.
     * @summary Create a contract
     * @param {ContractsApiCreateContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    createContract(requestParameters?: ContractsApiCreateContractRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<UnmanagedWallet>>;
    /**
     * Deletes a contract by ID.
     * @summary Delete a contract
     * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    deleteContract(requestParameters: ContractsApiDeleteContractRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Deletes a contract asset by ID.
     * @summary Delete a contract asset
     * @param {ContractsApiDeleteContractAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    deleteContractAsset(requestParameters: ContractsApiDeleteContractAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Returns a contract by ID.
     * @summary Find a specific contract
     * @param {ContractsApiGetContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    getContract(requestParameters: ContractsApiGetContractRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<UnmanagedWallet>>;
    /**
     * Returns a contract asset by ID.
     * @summary Find a contract asset
     * @param {ContractsApiGetContractAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    getContractAsset(requestParameters: ContractsApiGetContractAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ExternalWalletAsset>>;
    /**
     * Gets a list of contracts.
     * @summary List contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    getContracts(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetContractsResponse>>;
}
