/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateNetworkIdRequest } from '../models';
import { DeleteNetworkConnectionResponse } from '../models';
import { DeleteNetworkIdResponse } from '../models';
import { GetNetworkConnectionsResponse } from '../models';
import { GetNetworkIdsResponse } from '../models';
import { GetRoutingPolicyAssetGroupsResponse } from '../models';
import { NetworkConnection } from '../models';
import { NetworkConnectionResponse } from '../models';
import { NetworkIdResponse } from '../models';
import { SearchNetworkIdsResponse } from '../models';
import { SetNetworkIdDiscoverabilityRequest } from '../models';
import { SetNetworkIdNameRequest } from '../models';
import { SetNetworkIdResponse } from '../models';
import { SetNetworkIdRoutingPolicyRequest } from '../models';
import { SetRoutingPolicyRequest } from '../models';
import { SetRoutingPolicyResponse } from '../models';
import { ThirdPartyRouting } from '../models';
/**
 * NetworkConnectionsApi - axios parameter creator
 * @export
 */
export declare const NetworkConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
     * @summary Retrieve third-party network routing validation by asset type.
     * @param {string} connectionId The ID of the network connection
     * @param {string} assetType The destination asset type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkThirdPartyRouting: (connectionId: string, assetType: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new network connection
     * @param {NetworkConnection} [networkConnection]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetworkConnection: (networkConnection?: NetworkConnection, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new Network ID
     * @param {CreateNetworkIdRequest} [createNetworkIdRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetworkId: (createNetworkIdRequest?: CreateNetworkIdRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes a network connection by ID
     * @param {string} connectionId The ID of the network connection to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNetworkConnection: (connectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes specific network ID.
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNetworkId: (networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Get a network connection
     * @param {string} connectionId The ID of the connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetwork: (connectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary List network connections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkConnections: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns specific network ID.
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkId: (networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns all network IDs, both local IDs and discoverable remote IDs
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getNetworkIds: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of all enabled routing policy asset groups. Your routing policy defines how your transactions are routed. You can use one or more enabled routing policy asset groups to describe connection or network id routing policy.
     * @summary Returns all enabled routing policy asset groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutingPolicyAssetGroups: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs. Can be filtered.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Search network IDs, both local IDs and discoverable remote IDs
     * @param {string} [search] Search string - displayName networkId. Optional
     * @param {boolean} [excludeSelf] Exclude your networkIds. Optional, default false
     * @param {boolean} [excludeConnected] Exclude connected networkIds. Optional, default false
     * @param {string} [pageCursor] ID of the record after which to fetch $limit records
     * @param {number} [pageSize] Number of records to fetch. By default, it is 50
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchNetworkIds: (search?: string, excludeSelf?: boolean, excludeConnected?: boolean, pageCursor?: string, pageSize?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s discoverability.
     * @param {SetNetworkIdDiscoverabilityRequest} setNetworkIdDiscoverabilityRequest
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdDiscoverability: (setNetworkIdDiscoverabilityRequest: SetNetworkIdDiscoverabilityRequest, networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s name.
     * @param {SetNetworkIdNameRequest} setNetworkIdNameRequest
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdName: (setNetworkIdNameRequest: SetNetworkIdNameRequest, networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network id routing policy.
     * @param {string} networkId The ID of the network
     * @param {SetNetworkIdRoutingPolicyRequest} [setNetworkIdRoutingPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdRoutingPolicy: (networkId: string, setNetworkIdRoutingPolicyRequest?: SetNetworkIdRoutingPolicyRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network connection routing policy.
     * @param {string} connectionId The ID of the network connection
     * @param {SetRoutingPolicyRequest} [setRoutingPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoutingPolicy: (connectionId: string, setRoutingPolicyRequest?: SetRoutingPolicyRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NetworkConnectionsApi - functional programming interface
 * @export
 */
export declare const NetworkConnectionsApiFp: (configuration?: Configuration) => {
    /**
     * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
     * @summary Retrieve third-party network routing validation by asset type.
     * @param {string} connectionId The ID of the network connection
     * @param {string} assetType The destination asset type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkThirdPartyRouting(connectionId: string, assetType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThirdPartyRouting>>;
    /**
     * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new network connection
     * @param {NetworkConnection} [networkConnection]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetworkConnection(networkConnection?: NetworkConnection, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConnectionResponse>>;
    /**
     * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new Network ID
     * @param {CreateNetworkIdRequest} [createNetworkIdRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetworkId(createNetworkIdRequest?: CreateNetworkIdRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkIdResponse>>;
    /**
     * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes a network connection by ID
     * @param {string} connectionId The ID of the network connection to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNetworkConnection(connectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteNetworkConnectionResponse>>;
    /**
     * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes specific network ID.
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNetworkId(networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteNetworkIdResponse>>;
    /**
     * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Get a network connection
     * @param {string} connectionId The ID of the connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetwork(connectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConnectionResponse>>;
    /**
     * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary List network connections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkConnections(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNetworkConnectionsResponse>>;
    /**
     * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns specific network ID.
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkId(networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkIdResponse>>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns all network IDs, both local IDs and discoverable remote IDs
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getNetworkIds(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNetworkIdsResponse>>;
    /**
     * Retrieves a list of all enabled routing policy asset groups. Your routing policy defines how your transactions are routed. You can use one or more enabled routing policy asset groups to describe connection or network id routing policy.
     * @summary Returns all enabled routing policy asset groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutingPolicyAssetGroups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRoutingPolicyAssetGroupsResponse>>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs. Can be filtered.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Search network IDs, both local IDs and discoverable remote IDs
     * @param {string} [search] Search string - displayName networkId. Optional
     * @param {boolean} [excludeSelf] Exclude your networkIds. Optional, default false
     * @param {boolean} [excludeConnected] Exclude connected networkIds. Optional, default false
     * @param {string} [pageCursor] ID of the record after which to fetch $limit records
     * @param {number} [pageSize] Number of records to fetch. By default, it is 50
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchNetworkIds(search?: string, excludeSelf?: boolean, excludeConnected?: boolean, pageCursor?: string, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchNetworkIdsResponse>>;
    /**
     * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s discoverability.
     * @param {SetNetworkIdDiscoverabilityRequest} setNetworkIdDiscoverabilityRequest
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdDiscoverability(setNetworkIdDiscoverabilityRequest: SetNetworkIdDiscoverabilityRequest, networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetNetworkIdResponse>>;
    /**
     * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s name.
     * @param {SetNetworkIdNameRequest} setNetworkIdNameRequest
     * @param {string} networkId The ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdName(setNetworkIdNameRequest: SetNetworkIdNameRequest, networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetNetworkIdResponse>>;
    /**
     * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network id routing policy.
     * @param {string} networkId The ID of the network
     * @param {SetNetworkIdRoutingPolicyRequest} [setNetworkIdRoutingPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdRoutingPolicy(networkId: string, setNetworkIdRoutingPolicyRequest?: SetNetworkIdRoutingPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetNetworkIdResponse>>;
    /**
     * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network connection routing policy.
     * @param {string} connectionId The ID of the network connection
     * @param {SetRoutingPolicyRequest} [setRoutingPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoutingPolicy(connectionId: string, setRoutingPolicyRequest?: SetRoutingPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetRoutingPolicyResponse>>;
};
/**
 * NetworkConnectionsApi - factory interface
 * @export
 */
export declare const NetworkConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
     * @summary Retrieve third-party network routing validation by asset type.
     * @param {NetworkConnectionsApiCheckThirdPartyRoutingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkThirdPartyRouting(requestParameters: NetworkConnectionsApiCheckThirdPartyRoutingRequest, options?: RawAxiosRequestConfig): AxiosPromise<ThirdPartyRouting>;
    /**
     * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new network connection
     * @param {NetworkConnectionsApiCreateNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetworkConnection(requestParameters?: NetworkConnectionsApiCreateNetworkConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<NetworkConnectionResponse>;
    /**
     * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new Network ID
     * @param {NetworkConnectionsApiCreateNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetworkId(requestParameters?: NetworkConnectionsApiCreateNetworkIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<NetworkIdResponse>;
    /**
     * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes a network connection by ID
     * @param {NetworkConnectionsApiDeleteNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNetworkConnection(requestParameters: NetworkConnectionsApiDeleteNetworkConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteNetworkConnectionResponse>;
    /**
     * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes specific network ID.
     * @param {NetworkConnectionsApiDeleteNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNetworkId(requestParameters: NetworkConnectionsApiDeleteNetworkIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteNetworkIdResponse>;
    /**
     * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Get a network connection
     * @param {NetworkConnectionsApiGetNetworkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetwork(requestParameters: NetworkConnectionsApiGetNetworkRequest, options?: RawAxiosRequestConfig): AxiosPromise<NetworkConnectionResponse>;
    /**
     * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary List network connections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkConnections(options?: RawAxiosRequestConfig): AxiosPromise<GetNetworkConnectionsResponse>;
    /**
     * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns specific network ID.
     * @param {NetworkConnectionsApiGetNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkId(requestParameters: NetworkConnectionsApiGetNetworkIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<NetworkIdResponse>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns all network IDs, both local IDs and discoverable remote IDs
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getNetworkIds(options?: RawAxiosRequestConfig): AxiosPromise<GetNetworkIdsResponse>;
    /**
     * Retrieves a list of all enabled routing policy asset groups. Your routing policy defines how your transactions are routed. You can use one or more enabled routing policy asset groups to describe connection or network id routing policy.
     * @summary Returns all enabled routing policy asset groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutingPolicyAssetGroups(options?: RawAxiosRequestConfig): AxiosPromise<GetRoutingPolicyAssetGroupsResponse>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs. Can be filtered.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Search network IDs, both local IDs and discoverable remote IDs
     * @param {NetworkConnectionsApiSearchNetworkIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchNetworkIds(requestParameters?: NetworkConnectionsApiSearchNetworkIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchNetworkIdsResponse>;
    /**
     * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s discoverability.
     * @param {NetworkConnectionsApiSetNetworkIdDiscoverabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdDiscoverability(requestParameters: NetworkConnectionsApiSetNetworkIdDiscoverabilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetNetworkIdResponse>;
    /**
     * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s name.
     * @param {NetworkConnectionsApiSetNetworkIdNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdName(requestParameters: NetworkConnectionsApiSetNetworkIdNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetNetworkIdResponse>;
    /**
     * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network id routing policy.
     * @param {NetworkConnectionsApiSetNetworkIdRoutingPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setNetworkIdRoutingPolicy(requestParameters: NetworkConnectionsApiSetNetworkIdRoutingPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetNetworkIdResponse>;
    /**
     * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network connection routing policy.
     * @param {NetworkConnectionsApiSetRoutingPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoutingPolicy(requestParameters: NetworkConnectionsApiSetRoutingPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetRoutingPolicyResponse>;
};
/**
 * Request parameters for checkThirdPartyRouting operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiCheckThirdPartyRoutingRequest
 */
export interface NetworkConnectionsApiCheckThirdPartyRoutingRequest {
    /**
     * The ID of the network connection
     * @type {string}
     * @memberof NetworkConnectionsApiCheckThirdPartyRouting
     */
    readonly connectionId: string;
    /**
     * The destination asset type
     * @type {string}
     * @memberof NetworkConnectionsApiCheckThirdPartyRouting
     */
    readonly assetType: string;
}
/**
 * Request parameters for createNetworkConnection operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiCreateNetworkConnectionRequest
 */
export interface NetworkConnectionsApiCreateNetworkConnectionRequest {
    /**
     *
     * @type {NetworkConnection}
     * @memberof NetworkConnectionsApiCreateNetworkConnection
     */
    readonly networkConnection?: NetworkConnection;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof NetworkConnectionsApiCreateNetworkConnection
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createNetworkId operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiCreateNetworkIdRequest
 */
export interface NetworkConnectionsApiCreateNetworkIdRequest {
    /**
     *
     * @type {CreateNetworkIdRequest}
     * @memberof NetworkConnectionsApiCreateNetworkId
     */
    readonly createNetworkIdRequest?: CreateNetworkIdRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof NetworkConnectionsApiCreateNetworkId
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for deleteNetworkConnection operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiDeleteNetworkConnectionRequest
 */
export interface NetworkConnectionsApiDeleteNetworkConnectionRequest {
    /**
     * The ID of the network connection to delete
     * @type {string}
     * @memberof NetworkConnectionsApiDeleteNetworkConnection
     */
    readonly connectionId: string;
}
/**
 * Request parameters for deleteNetworkId operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiDeleteNetworkIdRequest
 */
export interface NetworkConnectionsApiDeleteNetworkIdRequest {
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiDeleteNetworkId
     */
    readonly networkId: string;
}
/**
 * Request parameters for getNetwork operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiGetNetworkRequest
 */
export interface NetworkConnectionsApiGetNetworkRequest {
    /**
     * The ID of the connection
     * @type {string}
     * @memberof NetworkConnectionsApiGetNetwork
     */
    readonly connectionId: string;
}
/**
 * Request parameters for getNetworkId operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiGetNetworkIdRequest
 */
export interface NetworkConnectionsApiGetNetworkIdRequest {
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiGetNetworkId
     */
    readonly networkId: string;
}
/**
 * Request parameters for searchNetworkIds operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSearchNetworkIdsRequest
 */
export interface NetworkConnectionsApiSearchNetworkIdsRequest {
    /**
     * Search string - displayName networkId. Optional
     * @type {string}
     * @memberof NetworkConnectionsApiSearchNetworkIds
     */
    readonly search?: string;
    /**
     * Exclude your networkIds. Optional, default false
     * @type {boolean}
     * @memberof NetworkConnectionsApiSearchNetworkIds
     */
    readonly excludeSelf?: boolean;
    /**
     * Exclude connected networkIds. Optional, default false
     * @type {boolean}
     * @memberof NetworkConnectionsApiSearchNetworkIds
     */
    readonly excludeConnected?: boolean;
    /**
     * ID of the record after which to fetch $limit records
     * @type {string}
     * @memberof NetworkConnectionsApiSearchNetworkIds
     */
    readonly pageCursor?: string;
    /**
     * Number of records to fetch. By default, it is 50
     * @type {number}
     * @memberof NetworkConnectionsApiSearchNetworkIds
     */
    readonly pageSize?: number;
}
/**
 * Request parameters for setNetworkIdDiscoverability operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetNetworkIdDiscoverabilityRequest
 */
export interface NetworkConnectionsApiSetNetworkIdDiscoverabilityRequest {
    /**
     *
     * @type {SetNetworkIdDiscoverabilityRequest}
     * @memberof NetworkConnectionsApiSetNetworkIdDiscoverability
     */
    readonly setNetworkIdDiscoverabilityRequest: SetNetworkIdDiscoverabilityRequest;
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiSetNetworkIdDiscoverability
     */
    readonly networkId: string;
}
/**
 * Request parameters for setNetworkIdName operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetNetworkIdNameRequest
 */
export interface NetworkConnectionsApiSetNetworkIdNameRequest {
    /**
     *
     * @type {SetNetworkIdNameRequest}
     * @memberof NetworkConnectionsApiSetNetworkIdName
     */
    readonly setNetworkIdNameRequest: SetNetworkIdNameRequest;
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiSetNetworkIdName
     */
    readonly networkId: string;
}
/**
 * Request parameters for setNetworkIdRoutingPolicy operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetNetworkIdRoutingPolicyRequest
 */
export interface NetworkConnectionsApiSetNetworkIdRoutingPolicyRequest {
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiSetNetworkIdRoutingPolicy
     */
    readonly networkId: string;
    /**
     *
     * @type {SetNetworkIdRoutingPolicyRequest}
     * @memberof NetworkConnectionsApiSetNetworkIdRoutingPolicy
     */
    readonly setNetworkIdRoutingPolicyRequest?: SetNetworkIdRoutingPolicyRequest;
}
/**
 * Request parameters for setRoutingPolicy operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetRoutingPolicyRequest
 */
export interface NetworkConnectionsApiSetRoutingPolicyRequest {
    /**
     * The ID of the network connection
     * @type {string}
     * @memberof NetworkConnectionsApiSetRoutingPolicy
     */
    readonly connectionId: string;
    /**
     *
     * @type {SetRoutingPolicyRequest}
     * @memberof NetworkConnectionsApiSetRoutingPolicy
     */
    readonly setRoutingPolicyRequest?: SetRoutingPolicyRequest;
}
/**
 * NetworkConnectionsApi - object-oriented interface
 * @export
 * @class NetworkConnectionsApi
 * @extends {BaseAPI}
 */
export declare class NetworkConnectionsApi extends BaseAPI {
    /**
     * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
     * @summary Retrieve third-party network routing validation by asset type.
     * @param {NetworkConnectionsApiCheckThirdPartyRoutingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    checkThirdPartyRouting(requestParameters: NetworkConnectionsApiCheckThirdPartyRoutingRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ThirdPartyRouting>>;
    /**
     * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new network connection
     * @param {NetworkConnectionsApiCreateNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    createNetworkConnection(requestParameters?: NetworkConnectionsApiCreateNetworkConnectionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<NetworkConnectionResponse>>;
    /**
     * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Creates a new Network ID
     * @param {NetworkConnectionsApiCreateNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    createNetworkId(requestParameters?: NetworkConnectionsApiCreateNetworkIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<NetworkIdResponse>>;
    /**
     * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes a network connection by ID
     * @param {NetworkConnectionsApiDeleteNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    deleteNetworkConnection(requestParameters: NetworkConnectionsApiDeleteNetworkConnectionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<DeleteNetworkConnectionResponse>>;
    /**
     * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Deletes specific network ID.
     * @param {NetworkConnectionsApiDeleteNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    deleteNetworkId(requestParameters: NetworkConnectionsApiDeleteNetworkIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<DeleteNetworkIdResponse>>;
    /**
     * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Get a network connection
     * @param {NetworkConnectionsApiGetNetworkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    getNetwork(requestParameters: NetworkConnectionsApiGetNetworkRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<NetworkConnectionResponse>>;
    /**
     * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary List network connections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    getNetworkConnections(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetNetworkConnectionsResponse>>;
    /**
     * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns specific network ID.
     * @param {NetworkConnectionsApiGetNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    getNetworkId(requestParameters: NetworkConnectionsApiGetNetworkIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<NetworkIdResponse>>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Returns all network IDs, both local IDs and discoverable remote IDs
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    getNetworkIds(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetNetworkIdsResponse>>;
    /**
     * Retrieves a list of all enabled routing policy asset groups. Your routing policy defines how your transactions are routed. You can use one or more enabled routing policy asset groups to describe connection or network id routing policy.
     * @summary Returns all enabled routing policy asset groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    getRoutingPolicyAssetGroups(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetRoutingPolicyAssetGroupsResponse>>;
    /**
     * Retrieves a list of all local and discoverable remote network IDs. Can be filtered.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Search network IDs, both local IDs and discoverable remote IDs
     * @param {NetworkConnectionsApiSearchNetworkIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    searchNetworkIds(requestParameters?: NetworkConnectionsApiSearchNetworkIdsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SearchNetworkIdsResponse>>;
    /**
     * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s discoverability.
     * @param {NetworkConnectionsApiSetNetworkIdDiscoverabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    setNetworkIdDiscoverability(requestParameters: NetworkConnectionsApiSetNetworkIdDiscoverabilityRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SetNetworkIdResponse>>;
    /**
     * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network ID\'s name.
     * @param {NetworkConnectionsApiSetNetworkIdNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    setNetworkIdName(requestParameters: NetworkConnectionsApiSetNetworkIdNameRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SetNetworkIdResponse>>;
    /**
     * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network id routing policy.
     * @param {NetworkConnectionsApiSetNetworkIdRoutingPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    setNetworkIdRoutingPolicy(requestParameters: NetworkConnectionsApiSetNetworkIdRoutingPolicyRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SetNetworkIdResponse>>;
    /**
     * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**  Supported asset groups for routing police can be found at `/network_ids/routing_policy_asset_groups`      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).
     * @summary Update network connection routing policy.
     * @param {NetworkConnectionsApiSetRoutingPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    setRoutingPolicy(requestParameters: NetworkConnectionsApiSetRoutingPolicyRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SetRoutingPolicyResponse>>;
}
