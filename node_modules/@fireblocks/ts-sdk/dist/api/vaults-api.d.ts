/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateAddressRequest } from '../models';
import { CreateAddressResponse } from '../models';
import { CreateAssetsRequest } from '../models';
import { CreateMultipleAccountsRequest } from '../models';
import { CreateVaultAccountRequest } from '../models';
import { CreateVaultAssetResponse } from '../models';
import { GetMaxSpendableAmountResponse } from '../models';
import { GetUnspentInputsResponse } from '../models';
import { GetVaultAssetsResponse } from '../models';
import { JobCreated } from '../models';
import { PaginatedAddressResponse } from '../models';
import { PaginatedAssetWalletResponse } from '../models';
import { PublicKeyInformation } from '../models';
import { RenameVaultAccountResponse } from '../models';
import { SetAutoFuelRequest } from '../models';
import { SetCustomerRefIdForAddressRequest } from '../models';
import { SetCustomerRefIdRequest } from '../models';
import { UpdateVaultAccountAssetAddressRequest } from '../models';
import { UpdateVaultAccountRequest } from '../models';
import { VaultAccount } from '../models';
import { VaultAccountsPagedResponse } from '../models';
import { VaultActionStatus } from '../models';
import { VaultAsset } from '../models';
/**
 * VaultsApi - axios parameter creator
 * @export
 */
export declare const VaultsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Initiates activation for a wallet in a vault account.
     * @summary Activate a wallet in a vault account
     * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateAssetForVaultAccount: (vaultAccountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Converts an existing segwit address to the legacy format.
     * @summary Convert a segwit address to legacy format
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {string} addressId The segwit address to translate
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLegacyAddress: (vaultAccountId: string, assetId: string, addressId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple vault accounts by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit accounts to 10k per operation and 200k per customer during beta testing.
     * @summary Bulk creation of new vault accounts
     * @param {CreateMultipleAccountsRequest} createMultipleAccountsRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMultipleAccounts: (createMultipleAccountsRequest: CreateMultipleAccountsRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new vault account with the requested name.
     * @summary Create a new vault account
     * @param {CreateVaultAccountRequest} createVaultAccountRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccount: (createVaultAccountRequest: CreateVaultAccountRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a wallet for a specific asset in a vault account.
     * @summary Create a new wallet
     * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @param {string} assetId The ID of the asset
     * @param {CreateAssetsRequest} [createAssetsRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccountAsset: (vaultAccountId: string, assetId: string, createAssetsRequest?: CreateAssetsRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new deposit address for an asset of a vault account.
     * @summary Create new asset deposit address
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {CreateAddressRequest} [createAddressRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccountAssetAddress: (vaultAccountId: string, assetId: string, createAddressRequest?: CreateAddressRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances.
     * @summary List asset wallets (Paginated)
     * @param {number} [totalAmountLargerThan] When specified, only asset wallets with total balance larger than this amount are returned.
     * @param {string} [assetId] When specified, only asset wallets cross vault accounts that have this asset ID are returned.
     * @param {GetAssetWalletsOrderByEnum} [orderBy]
     * @param {string} [before] Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page.
     * @param {string} [after] Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page.
     * @param {number} [limit] The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetWallets: (totalAmountLargerThan?: number, assetId?: string, orderBy?: GetAssetWalletsOrderByEnum, before?: string, after?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
     * @summary Get the maximum spendable amount in a single transaction.
     * @param {string} vaultAccountId The ID of the vault account, or \&#39;default\&#39; for the default vault account
     * @param {string} assetId The ID of the asset
     * @param {boolean} [manualSignging] False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaxSpendableAmount: (vaultAccountId: string, assetId: string, manualSignging?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
     * @summary List vault accounts (Paginated)
     * @param {string} [namePrefix]
     * @param {string} [nameSuffix]
     * @param {number} [minAmountThreshold] Specifying minAmountThreshold will filter accounts with balances greater than this value, otherwise, it will return all accounts.
     * @param {string} [assetId]
     * @param {GetPagedVaultAccountsOrderByEnum} [orderBy]
     * @param {string} [before]
     * @param {string} [after]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPagedVaultAccounts: (namePrefix?: string, nameSuffix?: string, minAmountThreshold?: number, assetId?: string, orderBy?: GetPagedVaultAccountsOrderByEnum, before?: string, after?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the public key information based on derivation path and signing algorithm.
     * @summary Get the public key information
     * @param {string} derivationPath
     * @param {string} algorithm
     * @param {boolean} [compressed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfo: (derivationPath: string, algorithm: string, compressed?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the public key information for the vault account.
     * @summary Get the public key for a vault account
     * @param {string} vaultAccountId
     * @param {string} assetId
     * @param {number} change
     * @param {number} addressIndex
     * @param {boolean} [compressed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfoForAddress: (vaultAccountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns unspent inputs information of an asset in a vault account.
     * @summary Get UTXO unspent inputs information
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnspentInputs: (vaultAccountId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the requested vault account.
     * @summary Find a vault account by ID
     * @param {string} vaultAccountId The ID of the vault account to return type: string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccount: (vaultAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a wallet for a specific asset of a vault account.
     * @summary Get the asset balance for a vault account
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccountAsset: (vaultAccountId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a paginated response of the addresses for a given vault account and asset.
     * @summary List addresses (Paginated)
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {number} [limit]
     * @param {string} [before]
     * @param {string} [after]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccountAssetAddressesPaginated: (vaultAccountId: string, assetId: string, limit?: number, before?: string, after?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the assets amount summary for all accounts or filtered accounts.
     * @summary Get asset balance for chosen assets
     * @param {string} [accountNamePrefix]
     * @param {string} [accountNameSuffix]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAssets: (accountNamePrefix?: string, accountNameSuffix?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the vault balance summary for an asset.
     * @summary Get vault balance by asset
     * @param {string} assetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultBalanceByAsset: (assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Hides the requested vault account from the web console view.
     * @summary Hide a vault account in the console
     * @param {string} vaultAccountId The vault account to hide
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hideVaultAccount: (vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets an AML/KYT customer reference ID for a specific address.
     * @summary Assign AML customer reference ID
     * @param {SetCustomerRefIdForAddressRequest} setCustomerRefIdForAddressRequest
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomerRefIdForAddress: (setCustomerRefIdForAddressRequest: SetCustomerRefIdForAddressRequest, vaultAccountId: string, assetId: string, addressId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets the autofueling property of the vault account to enabled or disabled.
     * @summary Turn autofueling on or off
     * @param {SetAutoFuelRequest} setAutoFuelRequest
     * @param {string} vaultAccountId The vault account ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaultAccountAutoFuel: (setAutoFuelRequest: SetAutoFuelRequest, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Assigns an AML/KYT customer reference ID for the vault account.
     * @summary Set an AML/KYT customer reference ID for a vault account
     * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
     * @param {string} vaultAccountId The vault account ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaultAccountCustomerRefId: (setCustomerRefIdRequest: SetCustomerRefIdRequest, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Makes a hidden vault account visible in web console view.
     * @summary Unhide a vault account in the console
     * @param {string} vaultAccountId The vault account to unhide
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unhideVaultAccount: (vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Renames the requested vault account.
     * @summary Rename a vault account
     * @param {UpdateVaultAccountRequest} updateVaultAccountRequest
     * @param {string} vaultAccountId The ID of the vault account to edit
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccount: (updateVaultAccountRequest: UpdateVaultAccountRequest, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the description of an existing address of an asset in a vault account.
     * @summary Update address description
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @param {UpdateVaultAccountAssetAddressRequest} [updateVaultAccountAssetAddressRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccountAssetAddress: (vaultAccountId: string, assetId: string, addressId: string, updateVaultAccountAssetAddressRequest?: UpdateVaultAccountAssetAddressRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the balance of a specific asset in a vault account.
     * @summary Refresh asset balance data
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccountAssetBalance: (vaultAccountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VaultsApi - functional programming interface
 * @export
 */
export declare const VaultsApiFp: (configuration?: Configuration) => {
    /**
     * Initiates activation for a wallet in a vault account.
     * @summary Activate a wallet in a vault account
     * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateAssetForVaultAccount(vaultAccountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVaultAssetResponse>>;
    /**
     * Converts an existing segwit address to the legacy format.
     * @summary Convert a segwit address to legacy format
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {string} addressId The segwit address to translate
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLegacyAddress(vaultAccountId: string, assetId: string, addressId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAddressResponse>>;
    /**
     * Create multiple vault accounts by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit accounts to 10k per operation and 200k per customer during beta testing.
     * @summary Bulk creation of new vault accounts
     * @param {CreateMultipleAccountsRequest} createMultipleAccountsRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMultipleAccounts(createMultipleAccountsRequest: CreateMultipleAccountsRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobCreated>>;
    /**
     * Creates a new vault account with the requested name.
     * @summary Create a new vault account
     * @param {CreateVaultAccountRequest} createVaultAccountRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccount(createVaultAccountRequest: CreateVaultAccountRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAccount>>;
    /**
     * Creates a wallet for a specific asset in a vault account.
     * @summary Create a new wallet
     * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @param {string} assetId The ID of the asset
     * @param {CreateAssetsRequest} [createAssetsRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccountAsset(vaultAccountId: string, assetId: string, createAssetsRequest?: CreateAssetsRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVaultAssetResponse>>;
    /**
     * Creates a new deposit address for an asset of a vault account.
     * @summary Create new asset deposit address
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {CreateAddressRequest} [createAddressRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccountAssetAddress(vaultAccountId: string, assetId: string, createAddressRequest?: CreateAddressRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAddressResponse>>;
    /**
     * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances.
     * @summary List asset wallets (Paginated)
     * @param {number} [totalAmountLargerThan] When specified, only asset wallets with total balance larger than this amount are returned.
     * @param {string} [assetId] When specified, only asset wallets cross vault accounts that have this asset ID are returned.
     * @param {GetAssetWalletsOrderByEnum} [orderBy]
     * @param {string} [before] Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page.
     * @param {string} [after] Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page.
     * @param {number} [limit] The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetWallets(totalAmountLargerThan?: number, assetId?: string, orderBy?: GetAssetWalletsOrderByEnum, before?: string, after?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAssetWalletResponse>>;
    /**
     * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
     * @summary Get the maximum spendable amount in a single transaction.
     * @param {string} vaultAccountId The ID of the vault account, or \&#39;default\&#39; for the default vault account
     * @param {string} assetId The ID of the asset
     * @param {boolean} [manualSignging] False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaxSpendableAmount(vaultAccountId: string, assetId: string, manualSignging?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMaxSpendableAmountResponse>>;
    /**
     * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
     * @summary List vault accounts (Paginated)
     * @param {string} [namePrefix]
     * @param {string} [nameSuffix]
     * @param {number} [minAmountThreshold] Specifying minAmountThreshold will filter accounts with balances greater than this value, otherwise, it will return all accounts.
     * @param {string} [assetId]
     * @param {GetPagedVaultAccountsOrderByEnum} [orderBy]
     * @param {string} [before]
     * @param {string} [after]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPagedVaultAccounts(namePrefix?: string, nameSuffix?: string, minAmountThreshold?: number, assetId?: string, orderBy?: GetPagedVaultAccountsOrderByEnum, before?: string, after?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAccountsPagedResponse>>;
    /**
     * Gets the public key information based on derivation path and signing algorithm.
     * @summary Get the public key information
     * @param {string} derivationPath
     * @param {string} algorithm
     * @param {boolean} [compressed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfo(derivationPath: string, algorithm: string, compressed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>>;
    /**
     * Gets the public key information for the vault account.
     * @summary Get the public key for a vault account
     * @param {string} vaultAccountId
     * @param {string} assetId
     * @param {number} change
     * @param {number} addressIndex
     * @param {boolean} [compressed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfoForAddress(vaultAccountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>>;
    /**
     * Returns unspent inputs information of an asset in a vault account.
     * @summary Get UTXO unspent inputs information
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnspentInputs(vaultAccountId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUnspentInputsResponse>>;
    /**
     * Returns the requested vault account.
     * @summary Find a vault account by ID
     * @param {string} vaultAccountId The ID of the vault account to return type: string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccount(vaultAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAccount>>;
    /**
     * Returns a wallet for a specific asset of a vault account.
     * @summary Get the asset balance for a vault account
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccountAsset(vaultAccountId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAsset>>;
    /**
     * Returns a paginated response of the addresses for a given vault account and asset.
     * @summary List addresses (Paginated)
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {number} [limit]
     * @param {string} [before]
     * @param {string} [after]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccountAssetAddressesPaginated(vaultAccountId: string, assetId: string, limit?: number, before?: string, after?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAddressResponse>>;
    /**
     * Gets the assets amount summary for all accounts or filtered accounts.
     * @summary Get asset balance for chosen assets
     * @param {string} [accountNamePrefix]
     * @param {string} [accountNameSuffix]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAssets(accountNamePrefix?: string, accountNameSuffix?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVaultAssetsResponse>>;
    /**
     * Gets the vault balance summary for an asset.
     * @summary Get vault balance by asset
     * @param {string} assetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultBalanceByAsset(assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAsset>>;
    /**
     * Hides the requested vault account from the web console view.
     * @summary Hide a vault account in the console
     * @param {string} vaultAccountId The vault account to hide
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hideVaultAccount(vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultActionStatus>>;
    /**
     * Sets an AML/KYT customer reference ID for a specific address.
     * @summary Assign AML customer reference ID
     * @param {SetCustomerRefIdForAddressRequest} setCustomerRefIdForAddressRequest
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomerRefIdForAddress(setCustomerRefIdForAddressRequest: SetCustomerRefIdForAddressRequest, vaultAccountId: string, assetId: string, addressId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultActionStatus>>;
    /**
     * Sets the autofueling property of the vault account to enabled or disabled.
     * @summary Turn autofueling on or off
     * @param {SetAutoFuelRequest} setAutoFuelRequest
     * @param {string} vaultAccountId The vault account ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaultAccountAutoFuel(setAutoFuelRequest: SetAutoFuelRequest, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultActionStatus>>;
    /**
     * Assigns an AML/KYT customer reference ID for the vault account.
     * @summary Set an AML/KYT customer reference ID for a vault account
     * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
     * @param {string} vaultAccountId The vault account ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaultAccountCustomerRefId(setCustomerRefIdRequest: SetCustomerRefIdRequest, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultActionStatus>>;
    /**
     * Makes a hidden vault account visible in web console view.
     * @summary Unhide a vault account in the console
     * @param {string} vaultAccountId The vault account to unhide
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unhideVaultAccount(vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultActionStatus>>;
    /**
     * Renames the requested vault account.
     * @summary Rename a vault account
     * @param {UpdateVaultAccountRequest} updateVaultAccountRequest
     * @param {string} vaultAccountId The ID of the vault account to edit
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccount(updateVaultAccountRequest: UpdateVaultAccountRequest, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenameVaultAccountResponse>>;
    /**
     * Updates the description of an existing address of an asset in a vault account.
     * @summary Update address description
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} assetId The ID of the asset
     * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @param {UpdateVaultAccountAssetAddressRequest} [updateVaultAccountAssetAddressRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccountAssetAddress(vaultAccountId: string, assetId: string, addressId: string, updateVaultAccountAssetAddressRequest?: UpdateVaultAccountAssetAddressRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultActionStatus>>;
    /**
     * Updates the balance of a specific asset in a vault account.
     * @summary Refresh asset balance data
     * @param {string} vaultAccountId The ID of the vault account to return
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccountAssetBalance(vaultAccountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAsset>>;
};
/**
 * VaultsApi - factory interface
 * @export
 */
export declare const VaultsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Initiates activation for a wallet in a vault account.
     * @summary Activate a wallet in a vault account
     * @param {VaultsApiActivateAssetForVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateAssetForVaultAccount(requestParameters: VaultsApiActivateAssetForVaultAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateVaultAssetResponse>;
    /**
     * Converts an existing segwit address to the legacy format.
     * @summary Convert a segwit address to legacy format
     * @param {VaultsApiCreateLegacyAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLegacyAddress(requestParameters: VaultsApiCreateLegacyAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateAddressResponse>;
    /**
     * Create multiple vault accounts by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit accounts to 10k per operation and 200k per customer during beta testing.
     * @summary Bulk creation of new vault accounts
     * @param {VaultsApiCreateMultipleAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMultipleAccounts(requestParameters: VaultsApiCreateMultipleAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobCreated>;
    /**
     * Creates a new vault account with the requested name.
     * @summary Create a new vault account
     * @param {VaultsApiCreateVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccount(requestParameters: VaultsApiCreateVaultAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultAccount>;
    /**
     * Creates a wallet for a specific asset in a vault account.
     * @summary Create a new wallet
     * @param {VaultsApiCreateVaultAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccountAsset(requestParameters: VaultsApiCreateVaultAccountAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateVaultAssetResponse>;
    /**
     * Creates a new deposit address for an asset of a vault account.
     * @summary Create new asset deposit address
     * @param {VaultsApiCreateVaultAccountAssetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVaultAccountAssetAddress(requestParameters: VaultsApiCreateVaultAccountAssetAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateAddressResponse>;
    /**
     * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances.
     * @summary List asset wallets (Paginated)
     * @param {VaultsApiGetAssetWalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetWallets(requestParameters?: VaultsApiGetAssetWalletsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedAssetWalletResponse>;
    /**
     * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
     * @summary Get the maximum spendable amount in a single transaction.
     * @param {VaultsApiGetMaxSpendableAmountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaxSpendableAmount(requestParameters: VaultsApiGetMaxSpendableAmountRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetMaxSpendableAmountResponse>;
    /**
     * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
     * @summary List vault accounts (Paginated)
     * @param {VaultsApiGetPagedVaultAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPagedVaultAccounts(requestParameters?: VaultsApiGetPagedVaultAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultAccountsPagedResponse>;
    /**
     * Gets the public key information based on derivation path and signing algorithm.
     * @summary Get the public key information
     * @param {VaultsApiGetPublicKeyInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfo(requestParameters: VaultsApiGetPublicKeyInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicKeyInformation>;
    /**
     * Gets the public key information for the vault account.
     * @summary Get the public key for a vault account
     * @param {VaultsApiGetPublicKeyInfoForAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfoForAddress(requestParameters: VaultsApiGetPublicKeyInfoForAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicKeyInformation>;
    /**
     * Returns unspent inputs information of an asset in a vault account.
     * @summary Get UTXO unspent inputs information
     * @param {VaultsApiGetUnspentInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnspentInputs(requestParameters: VaultsApiGetUnspentInputsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetUnspentInputsResponse>;
    /**
     * Returns the requested vault account.
     * @summary Find a vault account by ID
     * @param {VaultsApiGetVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccount(requestParameters: VaultsApiGetVaultAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultAccount>;
    /**
     * Returns a wallet for a specific asset of a vault account.
     * @summary Get the asset balance for a vault account
     * @param {VaultsApiGetVaultAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccountAsset(requestParameters: VaultsApiGetVaultAccountAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultAsset>;
    /**
     * Returns a paginated response of the addresses for a given vault account and asset.
     * @summary List addresses (Paginated)
     * @param {VaultsApiGetVaultAccountAssetAddressesPaginatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAccountAssetAddressesPaginated(requestParameters: VaultsApiGetVaultAccountAssetAddressesPaginatedRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedAddressResponse>;
    /**
     * Gets the assets amount summary for all accounts or filtered accounts.
     * @summary Get asset balance for chosen assets
     * @param {VaultsApiGetVaultAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultAssets(requestParameters?: VaultsApiGetVaultAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetVaultAssetsResponse>;
    /**
     * Gets the vault balance summary for an asset.
     * @summary Get vault balance by asset
     * @param {VaultsApiGetVaultBalanceByAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultBalanceByAsset(requestParameters: VaultsApiGetVaultBalanceByAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultAsset>;
    /**
     * Hides the requested vault account from the web console view.
     * @summary Hide a vault account in the console
     * @param {VaultsApiHideVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hideVaultAccount(requestParameters: VaultsApiHideVaultAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultActionStatus>;
    /**
     * Sets an AML/KYT customer reference ID for a specific address.
     * @summary Assign AML customer reference ID
     * @param {VaultsApiSetCustomerRefIdForAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomerRefIdForAddress(requestParameters: VaultsApiSetCustomerRefIdForAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultActionStatus>;
    /**
     * Sets the autofueling property of the vault account to enabled or disabled.
     * @summary Turn autofueling on or off
     * @param {VaultsApiSetVaultAccountAutoFuelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaultAccountAutoFuel(requestParameters: VaultsApiSetVaultAccountAutoFuelRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultActionStatus>;
    /**
     * Assigns an AML/KYT customer reference ID for the vault account.
     * @summary Set an AML/KYT customer reference ID for a vault account
     * @param {VaultsApiSetVaultAccountCustomerRefIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaultAccountCustomerRefId(requestParameters: VaultsApiSetVaultAccountCustomerRefIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultActionStatus>;
    /**
     * Makes a hidden vault account visible in web console view.
     * @summary Unhide a vault account in the console
     * @param {VaultsApiUnhideVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unhideVaultAccount(requestParameters: VaultsApiUnhideVaultAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultActionStatus>;
    /**
     * Renames the requested vault account.
     * @summary Rename a vault account
     * @param {VaultsApiUpdateVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccount(requestParameters: VaultsApiUpdateVaultAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<RenameVaultAccountResponse>;
    /**
     * Updates the description of an existing address of an asset in a vault account.
     * @summary Update address description
     * @param {VaultsApiUpdateVaultAccountAssetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccountAssetAddress(requestParameters: VaultsApiUpdateVaultAccountAssetAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultActionStatus>;
    /**
     * Updates the balance of a specific asset in a vault account.
     * @summary Refresh asset balance data
     * @param {VaultsApiUpdateVaultAccountAssetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVaultAccountAssetBalance(requestParameters: VaultsApiUpdateVaultAccountAssetBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<VaultAsset>;
};
/**
 * Request parameters for activateAssetForVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiActivateAssetForVaultAccountRequest
 */
export interface VaultsApiActivateAssetForVaultAccountRequest {
    /**
     * The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @type {string}
     * @memberof VaultsApiActivateAssetForVaultAccount
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiActivateAssetForVaultAccount
     */
    readonly assetId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiActivateAssetForVaultAccount
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createLegacyAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateLegacyAddressRequest
 */
export interface VaultsApiCreateLegacyAddressRequest {
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiCreateLegacyAddress
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiCreateLegacyAddress
     */
    readonly assetId: string;
    /**
     * The segwit address to translate
     * @type {string}
     * @memberof VaultsApiCreateLegacyAddress
     */
    readonly addressId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiCreateLegacyAddress
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createMultipleAccounts operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateMultipleAccountsRequest
 */
export interface VaultsApiCreateMultipleAccountsRequest {
    /**
     *
     * @type {CreateMultipleAccountsRequest}
     * @memberof VaultsApiCreateMultipleAccounts
     */
    readonly createMultipleAccountsRequest: CreateMultipleAccountsRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiCreateMultipleAccounts
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateVaultAccountRequest
 */
export interface VaultsApiCreateVaultAccountRequest {
    /**
     *
     * @type {CreateVaultAccountRequest}
     * @memberof VaultsApiCreateVaultAccount
     */
    readonly createVaultAccountRequest: CreateVaultAccountRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiCreateVaultAccount
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createVaultAccountAsset operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateVaultAccountAssetRequest
 */
export interface VaultsApiCreateVaultAccountAssetRequest {
    /**
     * The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAsset
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAsset
     */
    readonly assetId: string;
    /**
     *
     * @type {CreateAssetsRequest}
     * @memberof VaultsApiCreateVaultAccountAsset
     */
    readonly createAssetsRequest?: CreateAssetsRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAsset
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createVaultAccountAssetAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateVaultAccountAssetAddressRequest
 */
export interface VaultsApiCreateVaultAccountAssetAddressRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAssetAddress
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAssetAddress
     */
    readonly assetId: string;
    /**
     *
     * @type {CreateAddressRequest}
     * @memberof VaultsApiCreateVaultAccountAssetAddress
     */
    readonly createAddressRequest?: CreateAddressRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAssetAddress
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for getAssetWallets operation in VaultsApi.
 * @export
 * @interface VaultsApiGetAssetWalletsRequest
 */
export interface VaultsApiGetAssetWalletsRequest {
    /**
     * When specified, only asset wallets with total balance larger than this amount are returned.
     * @type {number}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly totalAmountLargerThan?: number;
    /**
     * When specified, only asset wallets cross vault accounts that have this asset ID are returned.
     * @type {string}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly assetId?: string;
    /**
     *
     * @type {'ASC' | 'DESC'}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly orderBy?: GetAssetWalletsOrderByEnum;
    /**
     * Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page.
     * @type {string}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly before?: string;
    /**
     * Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page.
     * @type {string}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly after?: string;
    /**
     * The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000.
     * @type {number}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly limit?: number;
}
/**
 * Request parameters for getMaxSpendableAmount operation in VaultsApi.
 * @export
 * @interface VaultsApiGetMaxSpendableAmountRequest
 */
export interface VaultsApiGetMaxSpendableAmountRequest {
    /**
     * The ID of the vault account, or \&#39;default\&#39; for the default vault account
     * @type {string}
     * @memberof VaultsApiGetMaxSpendableAmount
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetMaxSpendableAmount
     */
    readonly assetId: string;
    /**
     * False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device.
     * @type {boolean}
     * @memberof VaultsApiGetMaxSpendableAmount
     */
    readonly manualSignging?: boolean;
}
/**
 * Request parameters for getPagedVaultAccounts operation in VaultsApi.
 * @export
 * @interface VaultsApiGetPagedVaultAccountsRequest
 */
export interface VaultsApiGetPagedVaultAccountsRequest {
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly namePrefix?: string;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly nameSuffix?: string;
    /**
     * Specifying minAmountThreshold will filter accounts with balances greater than this value, otherwise, it will return all accounts.
     * @type {number}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly minAmountThreshold?: number;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly assetId?: string;
    /**
     *
     * @type {'ASC' | 'DESC'}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly orderBy?: GetPagedVaultAccountsOrderByEnum;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly before?: string;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly after?: string;
    /**
     *
     * @type {number}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly limit?: number;
}
/**
 * Request parameters for getPublicKeyInfo operation in VaultsApi.
 * @export
 * @interface VaultsApiGetPublicKeyInfoRequest
 */
export interface VaultsApiGetPublicKeyInfoRequest {
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfo
     */
    readonly derivationPath: string;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfo
     */
    readonly algorithm: string;
    /**
     *
     * @type {boolean}
     * @memberof VaultsApiGetPublicKeyInfo
     */
    readonly compressed?: boolean;
}
/**
 * Request parameters for getPublicKeyInfoForAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiGetPublicKeyInfoForAddressRequest
 */
export interface VaultsApiGetPublicKeyInfoForAddressRequest {
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly vaultAccountId: string;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly assetId: string;
    /**
     *
     * @type {number}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly change: number;
    /**
     *
     * @type {number}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly addressIndex: number;
    /**
     *
     * @type {boolean}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly compressed?: boolean;
}
/**
 * Request parameters for getUnspentInputs operation in VaultsApi.
 * @export
 * @interface VaultsApiGetUnspentInputsRequest
 */
export interface VaultsApiGetUnspentInputsRequest {
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiGetUnspentInputs
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetUnspentInputs
     */
    readonly assetId: string;
}
/**
 * Request parameters for getVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountRequest
 */
export interface VaultsApiGetVaultAccountRequest {
    /**
     * The ID of the vault account to return type: string
     * @type {string}
     * @memberof VaultsApiGetVaultAccount
     */
    readonly vaultAccountId: string;
}
/**
 * Request parameters for getVaultAccountAsset operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountAssetRequest
 */
export interface VaultsApiGetVaultAccountAssetRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAsset
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for getVaultAccountAssetAddressesPaginated operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountAssetAddressesPaginatedRequest
 */
export interface VaultsApiGetVaultAccountAssetAddressesPaginatedRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetAddressesPaginated
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetAddressesPaginated
     */
    readonly assetId: string;
    /**
     *
     * @type {number}
     * @memberof VaultsApiGetVaultAccountAssetAddressesPaginated
     */
    readonly limit?: number;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetAddressesPaginated
     */
    readonly before?: string;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetAddressesPaginated
     */
    readonly after?: string;
}
/**
 * Request parameters for getVaultAssets operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAssetsRequest
 */
export interface VaultsApiGetVaultAssetsRequest {
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetVaultAssets
     */
    readonly accountNamePrefix?: string;
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetVaultAssets
     */
    readonly accountNameSuffix?: string;
}
/**
 * Request parameters for getVaultBalanceByAsset operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultBalanceByAssetRequest
 */
export interface VaultsApiGetVaultBalanceByAssetRequest {
    /**
     *
     * @type {string}
     * @memberof VaultsApiGetVaultBalanceByAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for hideVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiHideVaultAccountRequest
 */
export interface VaultsApiHideVaultAccountRequest {
    /**
     * The vault account to hide
     * @type {string}
     * @memberof VaultsApiHideVaultAccount
     */
    readonly vaultAccountId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiHideVaultAccount
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for setCustomerRefIdForAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiSetCustomerRefIdForAddressRequest
 */
export interface VaultsApiSetCustomerRefIdForAddressRequest {
    /**
     *
     * @type {SetCustomerRefIdForAddressRequest}
     * @memberof VaultsApiSetCustomerRefIdForAddress
     */
    readonly setCustomerRefIdForAddressRequest: SetCustomerRefIdForAddressRequest;
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForAddress
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForAddress
     */
    readonly assetId: string;
    /**
     * The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForAddress
     */
    readonly addressId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForAddress
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for setVaultAccountAutoFuel operation in VaultsApi.
 * @export
 * @interface VaultsApiSetVaultAccountAutoFuelRequest
 */
export interface VaultsApiSetVaultAccountAutoFuelRequest {
    /**
     *
     * @type {SetAutoFuelRequest}
     * @memberof VaultsApiSetVaultAccountAutoFuel
     */
    readonly setAutoFuelRequest: SetAutoFuelRequest;
    /**
     * The vault account ID
     * @type {string}
     * @memberof VaultsApiSetVaultAccountAutoFuel
     */
    readonly vaultAccountId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiSetVaultAccountAutoFuel
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for setVaultAccountCustomerRefId operation in VaultsApi.
 * @export
 * @interface VaultsApiSetVaultAccountCustomerRefIdRequest
 */
export interface VaultsApiSetVaultAccountCustomerRefIdRequest {
    /**
     *
     * @type {SetCustomerRefIdRequest}
     * @memberof VaultsApiSetVaultAccountCustomerRefId
     */
    readonly setCustomerRefIdRequest: SetCustomerRefIdRequest;
    /**
     * The vault account ID
     * @type {string}
     * @memberof VaultsApiSetVaultAccountCustomerRefId
     */
    readonly vaultAccountId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiSetVaultAccountCustomerRefId
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for unhideVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiUnhideVaultAccountRequest
 */
export interface VaultsApiUnhideVaultAccountRequest {
    /**
     * The vault account to unhide
     * @type {string}
     * @memberof VaultsApiUnhideVaultAccount
     */
    readonly vaultAccountId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiUnhideVaultAccount
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiUpdateVaultAccountRequest
 */
export interface VaultsApiUpdateVaultAccountRequest {
    /**
     *
     * @type {UpdateVaultAccountRequest}
     * @memberof VaultsApiUpdateVaultAccount
     */
    readonly updateVaultAccountRequest: UpdateVaultAccountRequest;
    /**
     * The ID of the vault account to edit
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccount
     */
    readonly vaultAccountId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccount
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateVaultAccountAssetAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiUpdateVaultAccountAssetAddressRequest
 */
export interface VaultsApiUpdateVaultAccountAssetAddressRequest {
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly assetId: string;
    /**
     * The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly addressId: string;
    /**
     *
     * @type {UpdateVaultAccountAssetAddressRequest}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly updateVaultAccountAssetAddressRequest?: UpdateVaultAccountAssetAddressRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateVaultAccountAssetBalance operation in VaultsApi.
 * @export
 * @interface VaultsApiUpdateVaultAccountAssetBalanceRequest
 */
export interface VaultsApiUpdateVaultAccountAssetBalanceRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetBalance
     */
    readonly vaultAccountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetBalance
     */
    readonly assetId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetBalance
     */
    readonly idempotencyKey?: string;
}
/**
 * VaultsApi - object-oriented interface
 * @export
 * @class VaultsApi
 * @extends {BaseAPI}
 */
export declare class VaultsApi extends BaseAPI {
    /**
     * Initiates activation for a wallet in a vault account.
     * @summary Activate a wallet in a vault account
     * @param {VaultsApiActivateAssetForVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    activateAssetForVaultAccount(requestParameters: VaultsApiActivateAssetForVaultAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CreateVaultAssetResponse>>;
    /**
     * Converts an existing segwit address to the legacy format.
     * @summary Convert a segwit address to legacy format
     * @param {VaultsApiCreateLegacyAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    createLegacyAddress(requestParameters: VaultsApiCreateLegacyAddressRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CreateAddressResponse>>;
    /**
     * Create multiple vault accounts by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit accounts to 10k per operation and 200k per customer during beta testing.
     * @summary Bulk creation of new vault accounts
     * @param {VaultsApiCreateMultipleAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    createMultipleAccounts(requestParameters: VaultsApiCreateMultipleAccountsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<JobCreated>>;
    /**
     * Creates a new vault account with the requested name.
     * @summary Create a new vault account
     * @param {VaultsApiCreateVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    createVaultAccount(requestParameters: VaultsApiCreateVaultAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultAccount>>;
    /**
     * Creates a wallet for a specific asset in a vault account.
     * @summary Create a new wallet
     * @param {VaultsApiCreateVaultAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    createVaultAccountAsset(requestParameters: VaultsApiCreateVaultAccountAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CreateVaultAssetResponse>>;
    /**
     * Creates a new deposit address for an asset of a vault account.
     * @summary Create new asset deposit address
     * @param {VaultsApiCreateVaultAccountAssetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    createVaultAccountAssetAddress(requestParameters: VaultsApiCreateVaultAccountAssetAddressRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CreateAddressResponse>>;
    /**
     * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances.
     * @summary List asset wallets (Paginated)
     * @param {VaultsApiGetAssetWalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getAssetWallets(requestParameters?: VaultsApiGetAssetWalletsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<PaginatedAssetWalletResponse>>;
    /**
     * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
     * @summary Get the maximum spendable amount in a single transaction.
     * @param {VaultsApiGetMaxSpendableAmountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getMaxSpendableAmount(requestParameters: VaultsApiGetMaxSpendableAmountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetMaxSpendableAmountResponse>>;
    /**
     * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
     * @summary List vault accounts (Paginated)
     * @param {VaultsApiGetPagedVaultAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getPagedVaultAccounts(requestParameters?: VaultsApiGetPagedVaultAccountsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultAccountsPagedResponse>>;
    /**
     * Gets the public key information based on derivation path and signing algorithm.
     * @summary Get the public key information
     * @param {VaultsApiGetPublicKeyInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getPublicKeyInfo(requestParameters: VaultsApiGetPublicKeyInfoRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<PublicKeyInformation>>;
    /**
     * Gets the public key information for the vault account.
     * @summary Get the public key for a vault account
     * @param {VaultsApiGetPublicKeyInfoForAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getPublicKeyInfoForAddress(requestParameters: VaultsApiGetPublicKeyInfoForAddressRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<PublicKeyInformation>>;
    /**
     * Returns unspent inputs information of an asset in a vault account.
     * @summary Get UTXO unspent inputs information
     * @param {VaultsApiGetUnspentInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getUnspentInputs(requestParameters: VaultsApiGetUnspentInputsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetUnspentInputsResponse>>;
    /**
     * Returns the requested vault account.
     * @summary Find a vault account by ID
     * @param {VaultsApiGetVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultAccount(requestParameters: VaultsApiGetVaultAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultAccount>>;
    /**
     * Returns a wallet for a specific asset of a vault account.
     * @summary Get the asset balance for a vault account
     * @param {VaultsApiGetVaultAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultAccountAsset(requestParameters: VaultsApiGetVaultAccountAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultAsset>>;
    /**
     * Returns a paginated response of the addresses for a given vault account and asset.
     * @summary List addresses (Paginated)
     * @param {VaultsApiGetVaultAccountAssetAddressesPaginatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultAccountAssetAddressesPaginated(requestParameters: VaultsApiGetVaultAccountAssetAddressesPaginatedRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<PaginatedAddressResponse>>;
    /**
     * Gets the assets amount summary for all accounts or filtered accounts.
     * @summary Get asset balance for chosen assets
     * @param {VaultsApiGetVaultAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultAssets(requestParameters?: VaultsApiGetVaultAssetsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetVaultAssetsResponse>>;
    /**
     * Gets the vault balance summary for an asset.
     * @summary Get vault balance by asset
     * @param {VaultsApiGetVaultBalanceByAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultBalanceByAsset(requestParameters: VaultsApiGetVaultBalanceByAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultAsset>>;
    /**
     * Hides the requested vault account from the web console view.
     * @summary Hide a vault account in the console
     * @param {VaultsApiHideVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    hideVaultAccount(requestParameters: VaultsApiHideVaultAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultActionStatus>>;
    /**
     * Sets an AML/KYT customer reference ID for a specific address.
     * @summary Assign AML customer reference ID
     * @param {VaultsApiSetCustomerRefIdForAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    setCustomerRefIdForAddress(requestParameters: VaultsApiSetCustomerRefIdForAddressRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultActionStatus>>;
    /**
     * Sets the autofueling property of the vault account to enabled or disabled.
     * @summary Turn autofueling on or off
     * @param {VaultsApiSetVaultAccountAutoFuelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    setVaultAccountAutoFuel(requestParameters: VaultsApiSetVaultAccountAutoFuelRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultActionStatus>>;
    /**
     * Assigns an AML/KYT customer reference ID for the vault account.
     * @summary Set an AML/KYT customer reference ID for a vault account
     * @param {VaultsApiSetVaultAccountCustomerRefIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    setVaultAccountCustomerRefId(requestParameters: VaultsApiSetVaultAccountCustomerRefIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultActionStatus>>;
    /**
     * Makes a hidden vault account visible in web console view.
     * @summary Unhide a vault account in the console
     * @param {VaultsApiUnhideVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    unhideVaultAccount(requestParameters: VaultsApiUnhideVaultAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultActionStatus>>;
    /**
     * Renames the requested vault account.
     * @summary Rename a vault account
     * @param {VaultsApiUpdateVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    updateVaultAccount(requestParameters: VaultsApiUpdateVaultAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<RenameVaultAccountResponse>>;
    /**
     * Updates the description of an existing address of an asset in a vault account.
     * @summary Update address description
     * @param {VaultsApiUpdateVaultAccountAssetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    updateVaultAccountAssetAddress(requestParameters: VaultsApiUpdateVaultAccountAssetAddressRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultActionStatus>>;
    /**
     * Updates the balance of a specific asset in a vault account.
     * @summary Refresh asset balance data
     * @param {VaultsApiUpdateVaultAccountAssetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    updateVaultAccountAssetBalance(requestParameters: VaultsApiUpdateVaultAccountAssetBalanceRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<VaultAsset>>;
}
/**
 * @export
 */
export declare const GetAssetWalletsOrderByEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type GetAssetWalletsOrderByEnum = typeof GetAssetWalletsOrderByEnum[keyof typeof GetAssetWalletsOrderByEnum];
/**
 * @export
 */
export declare const GetPagedVaultAccountsOrderByEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type GetPagedVaultAccountsOrderByEnum = typeof GetPagedVaultAccountsOrderByEnum[keyof typeof GetPagedVaultAccountsOrderByEnum];
