/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateInternalWalletAssetRequest } from '../models';
import { CreateWalletRequest } from '../models';
import { GetInternalWalletsResponse } from '../models';
import { SetCustomerRefIdRequest } from '../models';
import { UnmanagedWallet } from '../models';
import { WalletAsset } from '../models';
/**
 * InternalWalletsApi - axios parameter creator
 * @export
 */
export declare const InternalWalletsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new internal wallet with the requested name.
     * @summary Create an internal wallet
     * @param {CreateWalletRequest} [createWalletRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInternalWallet: (createWalletRequest?: CreateWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Adds an asset to an existing internal wallet.
     * @summary Add an asset to an internal wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to add
     * @param {CreateInternalWalletAssetRequest} [createInternalWalletAssetRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInternalWalletAsset: (walletId: string, assetId: string, createInternalWalletAssetRequest?: CreateInternalWalletAssetRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an internal wallet by ID.
     * @summary Delete an internal wallet
     * @param {string} walletId The ID of the wallet to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInternalWallet: (walletId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a whitelisted address (for an asset) from an internal wallet.
     * @summary Delete a whitelisted address from an internal wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInternalWalletAsset: (walletId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all assets in an internal wallet by ID.
     * @summary Get assets for internal wallet
     * @param {string} walletId The ID of the wallet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWallet: (walletId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns information for an asset in an internal wallet.
     * @summary Get an asset from an internal wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWalletAsset: (walletId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets.
     * @summary List internal wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWallets: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets an AML/KYT customer reference ID for the specific internal wallet.
     * @summary Set an AML/KYT customer reference ID for an internal wallet
     * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
     * @param {string} walletId The wallet ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomerRefIdForInternalWallet: (setCustomerRefIdRequest: SetCustomerRefIdRequest, walletId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InternalWalletsApi - functional programming interface
 * @export
 */
export declare const InternalWalletsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new internal wallet with the requested name.
     * @summary Create an internal wallet
     * @param {CreateWalletRequest} [createWalletRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInternalWallet(createWalletRequest?: CreateWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>>;
    /**
     * Adds an asset to an existing internal wallet.
     * @summary Add an asset to an internal wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to add
     * @param {CreateInternalWalletAssetRequest} [createInternalWalletAssetRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInternalWalletAsset(walletId: string, assetId: string, createInternalWalletAssetRequest?: CreateInternalWalletAssetRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletAsset>>;
    /**
     * Deletes an internal wallet by ID.
     * @summary Delete an internal wallet
     * @param {string} walletId The ID of the wallet to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInternalWallet(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a whitelisted address (for an asset) from an internal wallet.
     * @summary Delete a whitelisted address from an internal wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInternalWalletAsset(walletId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns all assets in an internal wallet by ID.
     * @summary Get assets for internal wallet
     * @param {string} walletId The ID of the wallet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWallet(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>>;
    /**
     * Returns information for an asset in an internal wallet.
     * @summary Get an asset from an internal wallet
     * @param {string} walletId The ID of the wallet
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWalletAsset(walletId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletAsset>>;
    /**
     * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets.
     * @summary List internal wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWallets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInternalWalletsResponse>>;
    /**
     * Sets an AML/KYT customer reference ID for the specific internal wallet.
     * @summary Set an AML/KYT customer reference ID for an internal wallet
     * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
     * @param {string} walletId The wallet ID
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomerRefIdForInternalWallet(setCustomerRefIdRequest: SetCustomerRefIdRequest, walletId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * InternalWalletsApi - factory interface
 * @export
 */
export declare const InternalWalletsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new internal wallet with the requested name.
     * @summary Create an internal wallet
     * @param {InternalWalletsApiCreateInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInternalWallet(requestParameters?: InternalWalletsApiCreateInternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet>;
    /**
     * Adds an asset to an existing internal wallet.
     * @summary Add an asset to an internal wallet
     * @param {InternalWalletsApiCreateInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInternalWalletAsset(requestParameters: InternalWalletsApiCreateInternalWalletAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletAsset>;
    /**
     * Deletes an internal wallet by ID.
     * @summary Delete an internal wallet
     * @param {InternalWalletsApiDeleteInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInternalWallet(requestParameters: InternalWalletsApiDeleteInternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes a whitelisted address (for an asset) from an internal wallet.
     * @summary Delete a whitelisted address from an internal wallet
     * @param {InternalWalletsApiDeleteInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInternalWalletAsset(requestParameters: InternalWalletsApiDeleteInternalWalletAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns all assets in an internal wallet by ID.
     * @summary Get assets for internal wallet
     * @param {InternalWalletsApiGetInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWallet(requestParameters: InternalWalletsApiGetInternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet>;
    /**
     * Returns information for an asset in an internal wallet.
     * @summary Get an asset from an internal wallet
     * @param {InternalWalletsApiGetInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWalletAsset(requestParameters: InternalWalletsApiGetInternalWalletAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletAsset>;
    /**
     * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets.
     * @summary List internal wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternalWallets(options?: RawAxiosRequestConfig): AxiosPromise<GetInternalWalletsResponse>;
    /**
     * Sets an AML/KYT customer reference ID for the specific internal wallet.
     * @summary Set an AML/KYT customer reference ID for an internal wallet
     * @param {InternalWalletsApiSetCustomerRefIdForInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomerRefIdForInternalWallet(requestParameters: InternalWalletsApiSetCustomerRefIdForInternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for createInternalWallet operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiCreateInternalWalletRequest
 */
export interface InternalWalletsApiCreateInternalWalletRequest {
    /**
     *
     * @type {CreateWalletRequest}
     * @memberof InternalWalletsApiCreateInternalWallet
     */
    readonly createWalletRequest?: CreateWalletRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof InternalWalletsApiCreateInternalWallet
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createInternalWalletAsset operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiCreateInternalWalletAssetRequest
 */
export interface InternalWalletsApiCreateInternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof InternalWalletsApiCreateInternalWalletAsset
     */
    readonly walletId: string;
    /**
     * The ID of the asset to add
     * @type {string}
     * @memberof InternalWalletsApiCreateInternalWalletAsset
     */
    readonly assetId: string;
    /**
     *
     * @type {CreateInternalWalletAssetRequest}
     * @memberof InternalWalletsApiCreateInternalWalletAsset
     */
    readonly createInternalWalletAssetRequest?: CreateInternalWalletAssetRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof InternalWalletsApiCreateInternalWalletAsset
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for deleteInternalWallet operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiDeleteInternalWalletRequest
 */
export interface InternalWalletsApiDeleteInternalWalletRequest {
    /**
     * The ID of the wallet to delete
     * @type {string}
     * @memberof InternalWalletsApiDeleteInternalWallet
     */
    readonly walletId: string;
}
/**
 * Request parameters for deleteInternalWalletAsset operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiDeleteInternalWalletAssetRequest
 */
export interface InternalWalletsApiDeleteInternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof InternalWalletsApiDeleteInternalWalletAsset
     */
    readonly walletId: string;
    /**
     * The ID of the asset to delete
     * @type {string}
     * @memberof InternalWalletsApiDeleteInternalWalletAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for getInternalWallet operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiGetInternalWalletRequest
 */
export interface InternalWalletsApiGetInternalWalletRequest {
    /**
     * The ID of the wallet to return
     * @type {string}
     * @memberof InternalWalletsApiGetInternalWallet
     */
    readonly walletId: string;
}
/**
 * Request parameters for getInternalWalletAsset operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiGetInternalWalletAssetRequest
 */
export interface InternalWalletsApiGetInternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof InternalWalletsApiGetInternalWalletAsset
     */
    readonly walletId: string;
    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof InternalWalletsApiGetInternalWalletAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for setCustomerRefIdForInternalWallet operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiSetCustomerRefIdForInternalWalletRequest
 */
export interface InternalWalletsApiSetCustomerRefIdForInternalWalletRequest {
    /**
     *
     * @type {SetCustomerRefIdRequest}
     * @memberof InternalWalletsApiSetCustomerRefIdForInternalWallet
     */
    readonly setCustomerRefIdRequest: SetCustomerRefIdRequest;
    /**
     * The wallet ID
     * @type {string}
     * @memberof InternalWalletsApiSetCustomerRefIdForInternalWallet
     */
    readonly walletId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof InternalWalletsApiSetCustomerRefIdForInternalWallet
     */
    readonly idempotencyKey?: string;
}
/**
 * InternalWalletsApi - object-oriented interface
 * @export
 * @class InternalWalletsApi
 * @extends {BaseAPI}
 */
export declare class InternalWalletsApi extends BaseAPI {
    /**
     * Creates a new internal wallet with the requested name.
     * @summary Create an internal wallet
     * @param {InternalWalletsApiCreateInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    createInternalWallet(requestParameters?: InternalWalletsApiCreateInternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<UnmanagedWallet>>;
    /**
     * Adds an asset to an existing internal wallet.
     * @summary Add an asset to an internal wallet
     * @param {InternalWalletsApiCreateInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    createInternalWalletAsset(requestParameters: InternalWalletsApiCreateInternalWalletAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<WalletAsset>>;
    /**
     * Deletes an internal wallet by ID.
     * @summary Delete an internal wallet
     * @param {InternalWalletsApiDeleteInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    deleteInternalWallet(requestParameters: InternalWalletsApiDeleteInternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Deletes a whitelisted address (for an asset) from an internal wallet.
     * @summary Delete a whitelisted address from an internal wallet
     * @param {InternalWalletsApiDeleteInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    deleteInternalWalletAsset(requestParameters: InternalWalletsApiDeleteInternalWalletAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Returns all assets in an internal wallet by ID.
     * @summary Get assets for internal wallet
     * @param {InternalWalletsApiGetInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    getInternalWallet(requestParameters: InternalWalletsApiGetInternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<UnmanagedWallet>>;
    /**
     * Returns information for an asset in an internal wallet.
     * @summary Get an asset from an internal wallet
     * @param {InternalWalletsApiGetInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    getInternalWalletAsset(requestParameters: InternalWalletsApiGetInternalWalletAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<WalletAsset>>;
    /**
     * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets.
     * @summary List internal wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    getInternalWallets(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetInternalWalletsResponse>>;
    /**
     * Sets an AML/KYT customer reference ID for the specific internal wallet.
     * @summary Set an AML/KYT customer reference ID for an internal wallet
     * @param {InternalWalletsApiSetCustomerRefIdForInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    setCustomerRefIdForInternalWallet(requestParameters: InternalWalletsApiSetCustomerRefIdForInternalWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
}
