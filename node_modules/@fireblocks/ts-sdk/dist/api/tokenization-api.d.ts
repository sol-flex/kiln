/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CollectionBurnRequestDto } from '../models';
import { CollectionBurnResponseDto } from '../models';
import { CollectionDeployRequestDto } from '../models';
import { CollectionLinkDto } from '../models';
import { CollectionMintRequestDto } from '../models';
import { CollectionMintResponseDto } from '../models';
import { CreateTokenRequestDto } from '../models';
import { GetLinkedCollectionsPaginatedResponse } from '../models';
import { TokenLinkDto } from '../models';
import { TokenLinkRequestDto } from '../models';
import { TokensPaginatedResponse } from '../models';
/**
 * TokenizationApi - axios parameter creator
 * @export
 */
export declare const TokenizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Burn tokens in a collection
     * @summary Burn tokens
     * @param {CollectionBurnRequestDto} collectionBurnRequestDto
     * @param {string} id The collection link id
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    burnCollectionToken: (collectionBurnRequestDto: CollectionBurnRequestDto, id: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new collection and link it as a token
     * @summary Create a new collection
     * @param {CollectionDeployRequestDto} collectionDeployRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCollection: (collectionDeployRequestDto: CollectionDeployRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get collection token details by id
     * @summary Get collection token details
     * @param {string} id The collection link id
     * @param {string} tokenId The tokenId as it appears on the blockchain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCollectionTokenDetails: (id: string, tokenId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a collection by id
     * @summary Get a collection by id
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get collections (paginated)
     * @summary Get collections
     * @param {string} [pageCursor] Page cursor to get the next page, for example - \&quot;MjAyMy0xMi0xMyAyMDozNjowOC4zMDI&#x3D;:MTEwMA&#x3D;&#x3D;\&quot;
     * @param {number} [pageSize] Number of items per page (max 100), requesting more then 100 will return 100 items
     * @param {any} [status] A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedCollections: (pageCursor?: string, pageSize?: number, status?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedToken: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {string} [pageCursor] Page cursor to get the next page
     * @param {number} [pageSize] Number of items per page, requesting more then max will return max items
     * @param {any} [status] A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedTokens: (pageCursor?: string, pageSize?: number, status?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {CreateTokenRequestDto} createTokenRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueNewToken: (createTokenRequestDto: CreateTokenRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Link an a contract
     * @summary Link a contract
     * @param {TokenLinkRequestDto} tokenLinkRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    link: (tokenLinkRequestDto: TokenLinkRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Mint tokens and upload metadata
     * @summary Mint tokens
     * @param {CollectionMintRequestDto} collectionMintRequestDto
     * @param {string} id The collection link id
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintCollectionToken: (collectionMintRequestDto: CollectionMintRequestDto, id: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlink: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a collection link
     * @summary Delete a collection link
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkCollection: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokenizationApi - functional programming interface
 * @export
 */
export declare const TokenizationApiFp: (configuration?: Configuration) => {
    /**
     * Burn tokens in a collection
     * @summary Burn tokens
     * @param {CollectionBurnRequestDto} collectionBurnRequestDto
     * @param {string} id The collection link id
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    burnCollectionToken(collectionBurnRequestDto: CollectionBurnRequestDto, id: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionBurnResponseDto>>;
    /**
     * Create a new collection and link it as a token
     * @summary Create a new collection
     * @param {CollectionDeployRequestDto} collectionDeployRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCollection(collectionDeployRequestDto: CollectionDeployRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionLinkDto>>;
    /**
     * Get collection token details by id
     * @summary Get collection token details
     * @param {string} id The collection link id
     * @param {string} tokenId The tokenId as it appears on the blockchain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCollectionTokenDetails(id: string, tokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionLinkDto>>;
    /**
     * Get a collection by id
     * @summary Get a collection by id
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionLinkDto>>;
    /**
     * Get collections (paginated)
     * @summary Get collections
     * @param {string} [pageCursor] Page cursor to get the next page, for example - \&quot;MjAyMy0xMi0xMyAyMDozNjowOC4zMDI&#x3D;:MTEwMA&#x3D;&#x3D;\&quot;
     * @param {number} [pageSize] Number of items per page (max 100), requesting more then 100 will return 100 items
     * @param {any} [status] A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedCollections(pageCursor?: string, pageSize?: number, status?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLinkedCollectionsPaginatedResponse>>;
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedToken(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenLinkDto>>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {string} [pageCursor] Page cursor to get the next page
     * @param {number} [pageSize] Number of items per page, requesting more then max will return max items
     * @param {any} [status] A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedTokens(pageCursor?: string, pageSize?: number, status?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensPaginatedResponse>>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {CreateTokenRequestDto} createTokenRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueNewToken(createTokenRequestDto: CreateTokenRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenLinkDto>>;
    /**
     * Link an a contract
     * @summary Link a contract
     * @param {TokenLinkRequestDto} tokenLinkRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    link(tokenLinkRequestDto: TokenLinkRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenLinkDto>>;
    /**
     * Mint tokens and upload metadata
     * @summary Mint tokens
     * @param {CollectionMintRequestDto} collectionMintRequestDto
     * @param {string} id The collection link id
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintCollectionToken(collectionMintRequestDto: CollectionMintRequestDto, id: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionMintResponseDto>>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlink(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a collection link
     * @summary Delete a collection link
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkCollection(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * TokenizationApi - factory interface
 * @export
 */
export declare const TokenizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Burn tokens in a collection
     * @summary Burn tokens
     * @param {TokenizationApiBurnCollectionTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    burnCollectionToken(requestParameters: TokenizationApiBurnCollectionTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionBurnResponseDto>;
    /**
     * Create a new collection and link it as a token
     * @summary Create a new collection
     * @param {TokenizationApiCreateNewCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCollection(requestParameters: TokenizationApiCreateNewCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionLinkDto>;
    /**
     * Get collection token details by id
     * @summary Get collection token details
     * @param {TokenizationApiFetchCollectionTokenDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCollectionTokenDetails(requestParameters: TokenizationApiFetchCollectionTokenDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionLinkDto>;
    /**
     * Get a collection by id
     * @summary Get a collection by id
     * @param {TokenizationApiGetCollectionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionById(requestParameters: TokenizationApiGetCollectionByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionLinkDto>;
    /**
     * Get collections (paginated)
     * @summary Get collections
     * @param {TokenizationApiGetLinkedCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedCollections(requestParameters?: TokenizationApiGetLinkedCollectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetLinkedCollectionsPaginatedResponse>;
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {TokenizationApiGetLinkedTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedToken(requestParameters: TokenizationApiGetLinkedTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenLinkDto>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {TokenizationApiGetLinkedTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedTokens(requestParameters?: TokenizationApiGetLinkedTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokensPaginatedResponse>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {TokenizationApiIssueNewTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueNewToken(requestParameters: TokenizationApiIssueNewTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenLinkDto>;
    /**
     * Link an a contract
     * @summary Link a contract
     * @param {TokenizationApiLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    link(requestParameters: TokenizationApiLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenLinkDto>;
    /**
     * Mint tokens and upload metadata
     * @summary Mint tokens
     * @param {TokenizationApiMintCollectionTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintCollectionToken(requestParameters: TokenizationApiMintCollectionTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionMintResponseDto>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {TokenizationApiUnlinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlink(requestParameters: TokenizationApiUnlinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a collection link
     * @summary Delete a collection link
     * @param {TokenizationApiUnlinkCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkCollection(requestParameters: TokenizationApiUnlinkCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for burnCollectionToken operation in TokenizationApi.
 * @export
 * @interface TokenizationApiBurnCollectionTokenRequest
 */
export interface TokenizationApiBurnCollectionTokenRequest {
    /**
     *
     * @type {CollectionBurnRequestDto}
     * @memberof TokenizationApiBurnCollectionToken
     */
    readonly collectionBurnRequestDto: CollectionBurnRequestDto;
    /**
     * The collection link id
     * @type {string}
     * @memberof TokenizationApiBurnCollectionToken
     */
    readonly id: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TokenizationApiBurnCollectionToken
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createNewCollection operation in TokenizationApi.
 * @export
 * @interface TokenizationApiCreateNewCollectionRequest
 */
export interface TokenizationApiCreateNewCollectionRequest {
    /**
     *
     * @type {CollectionDeployRequestDto}
     * @memberof TokenizationApiCreateNewCollection
     */
    readonly collectionDeployRequestDto: CollectionDeployRequestDto;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TokenizationApiCreateNewCollection
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for fetchCollectionTokenDetails operation in TokenizationApi.
 * @export
 * @interface TokenizationApiFetchCollectionTokenDetailsRequest
 */
export interface TokenizationApiFetchCollectionTokenDetailsRequest {
    /**
     * The collection link id
     * @type {string}
     * @memberof TokenizationApiFetchCollectionTokenDetails
     */
    readonly id: string;
    /**
     * The tokenId as it appears on the blockchain
     * @type {string}
     * @memberof TokenizationApiFetchCollectionTokenDetails
     */
    readonly tokenId: string;
}
/**
 * Request parameters for getCollectionById operation in TokenizationApi.
 * @export
 * @interface TokenizationApiGetCollectionByIdRequest
 */
export interface TokenizationApiGetCollectionByIdRequest {
    /**
     * The token link id
     * @type {string}
     * @memberof TokenizationApiGetCollectionById
     */
    readonly id: string;
}
/**
 * Request parameters for getLinkedCollections operation in TokenizationApi.
 * @export
 * @interface TokenizationApiGetLinkedCollectionsRequest
 */
export interface TokenizationApiGetLinkedCollectionsRequest {
    /**
     * Page cursor to get the next page, for example - \&quot;MjAyMy0xMi0xMyAyMDozNjowOC4zMDI&#x3D;:MTEwMA&#x3D;&#x3D;\&quot;
     * @type {string}
     * @memberof TokenizationApiGetLinkedCollections
     */
    readonly pageCursor?: string;
    /**
     * Number of items per page (max 100), requesting more then 100 will return 100 items
     * @type {number}
     * @memberof TokenizationApiGetLinkedCollections
     */
    readonly pageSize?: number;
    /**
     * A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @type {any}
     * @memberof TokenizationApiGetLinkedCollections
     */
    readonly status?: any;
}
/**
 * Request parameters for getLinkedToken operation in TokenizationApi.
 * @export
 * @interface TokenizationApiGetLinkedTokenRequest
 */
export interface TokenizationApiGetLinkedTokenRequest {
    /**
     * The token link id
     * @type {string}
     * @memberof TokenizationApiGetLinkedToken
     */
    readonly id: string;
}
/**
 * Request parameters for getLinkedTokens operation in TokenizationApi.
 * @export
 * @interface TokenizationApiGetLinkedTokensRequest
 */
export interface TokenizationApiGetLinkedTokensRequest {
    /**
     * Page cursor to get the next page
     * @type {string}
     * @memberof TokenizationApiGetLinkedTokens
     */
    readonly pageCursor?: string;
    /**
     * Number of items per page, requesting more then max will return max items
     * @type {number}
     * @memberof TokenizationApiGetLinkedTokens
     */
    readonly pageSize?: number;
    /**
     * A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @type {any}
     * @memberof TokenizationApiGetLinkedTokens
     */
    readonly status?: any;
}
/**
 * Request parameters for issueNewToken operation in TokenizationApi.
 * @export
 * @interface TokenizationApiIssueNewTokenRequest
 */
export interface TokenizationApiIssueNewTokenRequest {
    /**
     *
     * @type {CreateTokenRequestDto}
     * @memberof TokenizationApiIssueNewToken
     */
    readonly createTokenRequestDto: CreateTokenRequestDto;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TokenizationApiIssueNewToken
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for link operation in TokenizationApi.
 * @export
 * @interface TokenizationApiLinkRequest
 */
export interface TokenizationApiLinkRequest {
    /**
     *
     * @type {TokenLinkRequestDto}
     * @memberof TokenizationApiLink
     */
    readonly tokenLinkRequestDto: TokenLinkRequestDto;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TokenizationApiLink
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for mintCollectionToken operation in TokenizationApi.
 * @export
 * @interface TokenizationApiMintCollectionTokenRequest
 */
export interface TokenizationApiMintCollectionTokenRequest {
    /**
     *
     * @type {CollectionMintRequestDto}
     * @memberof TokenizationApiMintCollectionToken
     */
    readonly collectionMintRequestDto: CollectionMintRequestDto;
    /**
     * The collection link id
     * @type {string}
     * @memberof TokenizationApiMintCollectionToken
     */
    readonly id: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TokenizationApiMintCollectionToken
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for unlink operation in TokenizationApi.
 * @export
 * @interface TokenizationApiUnlinkRequest
 */
export interface TokenizationApiUnlinkRequest {
    /**
     * The token link id
     * @type {string}
     * @memberof TokenizationApiUnlink
     */
    readonly id: string;
}
/**
 * Request parameters for unlinkCollection operation in TokenizationApi.
 * @export
 * @interface TokenizationApiUnlinkCollectionRequest
 */
export interface TokenizationApiUnlinkCollectionRequest {
    /**
     * The token link id
     * @type {string}
     * @memberof TokenizationApiUnlinkCollection
     */
    readonly id: string;
}
/**
 * TokenizationApi - object-oriented interface
 * @export
 * @class TokenizationApi
 * @extends {BaseAPI}
 */
export declare class TokenizationApi extends BaseAPI {
    /**
     * Burn tokens in a collection
     * @summary Burn tokens
     * @param {TokenizationApiBurnCollectionTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    burnCollectionToken(requestParameters: TokenizationApiBurnCollectionTokenRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CollectionBurnResponseDto>>;
    /**
     * Create a new collection and link it as a token
     * @summary Create a new collection
     * @param {TokenizationApiCreateNewCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    createNewCollection(requestParameters: TokenizationApiCreateNewCollectionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CollectionLinkDto>>;
    /**
     * Get collection token details by id
     * @summary Get collection token details
     * @param {TokenizationApiFetchCollectionTokenDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    fetchCollectionTokenDetails(requestParameters: TokenizationApiFetchCollectionTokenDetailsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CollectionLinkDto>>;
    /**
     * Get a collection by id
     * @summary Get a collection by id
     * @param {TokenizationApiGetCollectionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    getCollectionById(requestParameters: TokenizationApiGetCollectionByIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CollectionLinkDto>>;
    /**
     * Get collections (paginated)
     * @summary Get collections
     * @param {TokenizationApiGetLinkedCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    getLinkedCollections(requestParameters?: TokenizationApiGetLinkedCollectionsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetLinkedCollectionsPaginatedResponse>>;
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {TokenizationApiGetLinkedTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    getLinkedToken(requestParameters: TokenizationApiGetLinkedTokenRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokenLinkDto>>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {TokenizationApiGetLinkedTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    getLinkedTokens(requestParameters?: TokenizationApiGetLinkedTokensRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokensPaginatedResponse>>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {TokenizationApiIssueNewTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    issueNewToken(requestParameters: TokenizationApiIssueNewTokenRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokenLinkDto>>;
    /**
     * Link an a contract
     * @summary Link a contract
     * @param {TokenizationApiLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    link(requestParameters: TokenizationApiLinkRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokenLinkDto>>;
    /**
     * Mint tokens and upload metadata
     * @summary Mint tokens
     * @param {TokenizationApiMintCollectionTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    mintCollectionToken(requestParameters: TokenizationApiMintCollectionTokenRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CollectionMintResponseDto>>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {TokenizationApiUnlinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    unlink(requestParameters: TokenizationApiUnlinkRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Delete a collection link
     * @summary Delete a collection link
     * @param {TokenizationApiUnlinkCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    unlinkCollection(requestParameters: TokenizationApiUnlinkCollectionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
}
