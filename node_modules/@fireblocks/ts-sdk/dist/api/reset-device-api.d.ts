/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
/**
 * ResetDeviceApi - axios parameter creator
 * @export
 */
export declare const ResetDeviceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Resets mobile device for given console user, that user will need to do mobile onboarding again.
     * @summary Resets device
     * @param {string} id The ID of the console user
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetDevice: (id: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ResetDeviceApi - functional programming interface
 * @export
 */
export declare const ResetDeviceApiFp: (configuration?: Configuration) => {
    /**
     * Resets mobile device for given console user, that user will need to do mobile onboarding again.
     * @summary Resets device
     * @param {string} id The ID of the console user
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetDevice(id: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ResetDeviceApi - factory interface
 * @export
 */
export declare const ResetDeviceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Resets mobile device for given console user, that user will need to do mobile onboarding again.
     * @summary Resets device
     * @param {ResetDeviceApiResetDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetDevice(requestParameters: ResetDeviceApiResetDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for resetDevice operation in ResetDeviceApi.
 * @export
 * @interface ResetDeviceApiResetDeviceRequest
 */
export interface ResetDeviceApiResetDeviceRequest {
    /**
     * The ID of the console user
     * @type {string}
     * @memberof ResetDeviceApiResetDevice
     */
    readonly id: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ResetDeviceApiResetDevice
     */
    readonly idempotencyKey?: string;
}
/**
 * ResetDeviceApi - object-oriented interface
 * @export
 * @class ResetDeviceApi
 * @extends {BaseAPI}
 */
export declare class ResetDeviceApi extends BaseAPI {
    /**
     * Resets mobile device for given console user, that user will need to do mobile onboarding again.
     * @summary Resets device
     * @param {ResetDeviceApiResetDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetDeviceApi
     */
    resetDevice(requestParameters: ResetDeviceApiResetDeviceRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
}
