"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalWalletsApi = exports.ExternalWalletsApiFactory = exports.ExternalWalletsApiFp = exports.ExternalWalletsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
var fireblocksResponse_1 = require("../response/fireblocksResponse");
// URLSearchParams not necessarily used
// @ts-ignore
var url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
var validation_utils_1 = require("../utils/validation_utils");
// @ts-ignore
var base_1 = require("../base");
/**
 * ExternalWalletsApi - axios parameter creator
 * @export
 */
var ExternalWalletsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds an asset to an existing external wallet.
         * @summary Add an asset to an external wallet.
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to add
         * @param {AddAssetToExternalWalletRequest} [addAssetToExternalWalletRequest]
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAssetToExternalWallet: function (walletId, assetId, addAssetToExternalWalletRequest, idempotencyKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('addAssetToExternalWallet', 'walletId', walletId);
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('addAssetToExternalWallet', 'assetId', assetId);
                    localVarPath = "/external_wallets/{walletId}/{assetId}"
                        .replace("{".concat("walletId", "}"), encodeURIComponent(String(walletId)))
                        .replace("{".concat("assetId", "}"), encodeURIComponent(String(assetId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (idempotencyKey != null) {
                        localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addAssetToExternalWalletRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a new external wallet with the requested name.
         * @summary Create an external wallet
         * @param {CreateWalletRequest} [createWalletRequest]
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalWallet: function (createWalletRequest, idempotencyKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/external_wallets";
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (idempotencyKey != null) {
                        localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWalletRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an external wallet by ID.
         * @summary Delete an external wallet
         * @param {string} walletId The ID of the wallet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalWallet: function (walletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('deleteExternalWallet', 'walletId', walletId);
                    localVarPath = "/external_wallets/{walletId}"
                        .replace("{".concat("walletId", "}"), encodeURIComponent(String(walletId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns an external wallet by ID.
         * @summary Find an external wallet
         * @param {string} walletId The ID of the wallet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallet: function (walletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('getExternalWallet', 'walletId', walletId);
                    localVarPath = "/external_wallets/{walletId}"
                        .replace("{".concat("walletId", "}"), encodeURIComponent(String(walletId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns an external wallet by wallet ID and asset ID.
         * @summary Get an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWalletAsset: function (walletId, assetId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('getExternalWalletAsset', 'walletId', walletId);
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('getExternalWalletAsset', 'assetId', assetId);
                    localVarPath = "/external_wallets/{walletId}/{assetId}"
                        .replace("{".concat("walletId", "}"), encodeURIComponent(String(walletId)))
                        .replace("{".concat("assetId", "}"), encodeURIComponent(String(assetId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets a list of external wallets under the workspace.
         * @summary List external wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallets: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/external_wallets";
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an external wallet asset by ID.
         * @summary Delete an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssetFromExternalWallet: function (walletId, assetId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('removeAssetFromExternalWallet', 'walletId', walletId);
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('removeAssetFromExternalWallet', 'assetId', assetId);
                    localVarPath = "/external_wallets/{walletId}/{assetId}"
                        .replace("{".concat("walletId", "}"), encodeURIComponent(String(walletId)))
                        .replace("{".concat("assetId", "}"), encodeURIComponent(String(assetId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific external wallet.
         * @summary Set an AML customer reference ID for an external wallet
         * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
         * @param {string} walletId The wallet ID
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalWalletCustomerRefId: function (setCustomerRefIdRequest, walletId, idempotencyKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, common_1.assertParamExists)('setExternalWalletCustomerRefId', 'setCustomerRefIdRequest', setCustomerRefIdRequest);
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('setExternalWalletCustomerRefId', 'walletId', walletId);
                    localVarPath = "/external_wallets/{walletId}/set_customer_ref_id"
                        .replace("{".concat("walletId", "}"), encodeURIComponent(String(walletId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (idempotencyKey != null) {
                        localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setCustomerRefIdRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ExternalWalletsApiAxiosParamCreator = ExternalWalletsApiAxiosParamCreator;
/**
 * ExternalWalletsApi - functional programming interface
 * @export
 */
var ExternalWalletsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ExternalWalletsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds an asset to an existing external wallet.
         * @summary Add an asset to an external wallet.
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to add
         * @param {AddAssetToExternalWalletRequest} [addAssetToExternalWalletRequest]
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAssetToExternalWallet: function (walletId, assetId, addAssetToExternalWalletRequest, idempotencyKey, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addAssetToExternalWallet(walletId, assetId, addAssetToExternalWalletRequest, idempotencyKey, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.addAssetToExternalWallet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Creates a new external wallet with the requested name.
         * @summary Create an external wallet
         * @param {CreateWalletRequest} [createWalletRequest]
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalWallet: function (createWalletRequest, idempotencyKey, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createExternalWallet(createWalletRequest, idempotencyKey, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.createExternalWallet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Deletes an external wallet by ID.
         * @summary Delete an external wallet
         * @param {string} walletId The ID of the wallet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalWallet: function (walletId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteExternalWallet(walletId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.deleteExternalWallet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns an external wallet by ID.
         * @summary Find an external wallet
         * @param {string} walletId The ID of the wallet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallet: function (walletId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExternalWallet(walletId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.getExternalWallet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns an external wallet by wallet ID and asset ID.
         * @summary Get an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWalletAsset: function (walletId, assetId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExternalWalletAsset(walletId, assetId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.getExternalWalletAsset']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Gets a list of external wallets under the workspace.
         * @summary List external wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallets: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExternalWallets(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.getExternalWallets']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Deletes an external wallet asset by ID.
         * @summary Delete an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssetFromExternalWallet: function (walletId, assetId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeAssetFromExternalWallet(walletId, assetId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.removeAssetFromExternalWallet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific external wallet.
         * @summary Set an AML customer reference ID for an external wallet
         * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest
         * @param {string} walletId The wallet ID
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalWalletCustomerRefId: function (setCustomerRefIdRequest, walletId, idempotencyKey, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setExternalWalletCustomerRefId(setCustomerRefIdRequest, walletId, idempotencyKey, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExternalWalletsApi.setExternalWalletCustomerRefId']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ExternalWalletsApiFp = ExternalWalletsApiFp;
/**
 * ExternalWalletsApi - factory interface
 * @export
 */
var ExternalWalletsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ExternalWalletsApiFp)(configuration);
    return {
        /**
         * Adds an asset to an existing external wallet.
         * @summary Add an asset to an external wallet.
         * @param {ExternalWalletsApiAddAssetToExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAssetToExternalWallet: function (requestParameters, options) {
            return localVarFp.addAssetToExternalWallet(requestParameters.walletId, requestParameters.assetId, requestParameters.addAssetToExternalWalletRequest, requestParameters.idempotencyKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new external wallet with the requested name.
         * @summary Create an external wallet
         * @param {ExternalWalletsApiCreateExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalWallet: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.createExternalWallet(requestParameters.createWalletRequest, requestParameters.idempotencyKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an external wallet by ID.
         * @summary Delete an external wallet
         * @param {ExternalWalletsApiDeleteExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalWallet: function (requestParameters, options) {
            return localVarFp.deleteExternalWallet(requestParameters.walletId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns an external wallet by ID.
         * @summary Find an external wallet
         * @param {ExternalWalletsApiGetExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallet: function (requestParameters, options) {
            return localVarFp.getExternalWallet(requestParameters.walletId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns an external wallet by wallet ID and asset ID.
         * @summary Get an asset from an external wallet
         * @param {ExternalWalletsApiGetExternalWalletAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWalletAsset: function (requestParameters, options) {
            return localVarFp.getExternalWalletAsset(requestParameters.walletId, requestParameters.assetId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a list of external wallets under the workspace.
         * @summary List external wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallets: function (options) {
            return localVarFp.getExternalWallets(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an external wallet asset by ID.
         * @summary Delete an asset from an external wallet
         * @param {ExternalWalletsApiRemoveAssetFromExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssetFromExternalWallet: function (requestParameters, options) {
            return localVarFp.removeAssetFromExternalWallet(requestParameters.walletId, requestParameters.assetId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific external wallet.
         * @summary Set an AML customer reference ID for an external wallet
         * @param {ExternalWalletsApiSetExternalWalletCustomerRefIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalWalletCustomerRefId: function (requestParameters, options) {
            return localVarFp.setExternalWalletCustomerRefId(requestParameters.setCustomerRefIdRequest, requestParameters.walletId, requestParameters.idempotencyKey, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ExternalWalletsApiFactory = ExternalWalletsApiFactory;
/**
 * ExternalWalletsApi - object-oriented interface
 * @export
 * @class ExternalWalletsApi
 * @extends {BaseAPI}
 */
var ExternalWalletsApi = /** @class */ (function (_super) {
    __extends(ExternalWalletsApi, _super);
    function ExternalWalletsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds an asset to an existing external wallet.
     * @summary Add an asset to an external wallet.
     * @param {ExternalWalletsApiAddAssetToExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.addAssetToExternalWallet = function (requestParameters) {
        var _this = this;
        return (0, exports.ExternalWalletsApiFp)(this.configuration).addAssetToExternalWallet(requestParameters.walletId, requestParameters.assetId, requestParameters.addAssetToExternalWalletRequest, requestParameters.idempotencyKey).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Creates a new external wallet with the requested name.
     * @summary Create an external wallet
     * @param {ExternalWalletsApiCreateExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.createExternalWallet = function (requestParameters) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ExternalWalletsApiFp)(this.configuration).createExternalWallet(requestParameters.createWalletRequest, requestParameters.idempotencyKey).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Deletes an external wallet by ID.
     * @summary Delete an external wallet
     * @param {ExternalWalletsApiDeleteExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.deleteExternalWallet = function (requestParameters) {
        var _this = this;
        return (0, exports.ExternalWalletsApiFp)(this.configuration).deleteExternalWallet(requestParameters.walletId).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Returns an external wallet by ID.
     * @summary Find an external wallet
     * @param {ExternalWalletsApiGetExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.getExternalWallet = function (requestParameters) {
        var _this = this;
        return (0, exports.ExternalWalletsApiFp)(this.configuration).getExternalWallet(requestParameters.walletId).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Returns an external wallet by wallet ID and asset ID.
     * @summary Get an asset from an external wallet
     * @param {ExternalWalletsApiGetExternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.getExternalWalletAsset = function (requestParameters) {
        var _this = this;
        return (0, exports.ExternalWalletsApiFp)(this.configuration).getExternalWalletAsset(requestParameters.walletId, requestParameters.assetId).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Gets a list of external wallets under the workspace.
     * @summary List external wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.getExternalWallets = function () {
        var _this = this;
        return (0, exports.ExternalWalletsApiFp)(this.configuration).getExternalWallets().then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Deletes an external wallet asset by ID.
     * @summary Delete an asset from an external wallet
     * @param {ExternalWalletsApiRemoveAssetFromExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.removeAssetFromExternalWallet = function (requestParameters) {
        var _this = this;
        return (0, exports.ExternalWalletsApiFp)(this.configuration).removeAssetFromExternalWallet(requestParameters.walletId, requestParameters.assetId).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Sets an AML/KYT customer reference ID for the specific external wallet.
     * @summary Set an AML customer reference ID for an external wallet
     * @param {ExternalWalletsApiSetExternalWalletCustomerRefIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    ExternalWalletsApi.prototype.setExternalWalletCustomerRefId = function (requestParameters) {
        var _this = this;
        return (0, exports.ExternalWalletsApiFp)(this.configuration).setExternalWalletCustomerRefId(requestParameters.setCustomerRefIdRequest, requestParameters.walletId, requestParameters.idempotencyKey).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    return ExternalWalletsApi;
}(base_1.BaseAPI));
exports.ExternalWalletsApi = ExternalWalletsApi;
//# sourceMappingURL=external-wallets-api.js.map