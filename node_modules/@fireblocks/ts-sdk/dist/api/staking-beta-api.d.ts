/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ChainInfoResponseDto } from '../models';
import { DelegationDto } from '../models';
import { DelegationSummaryDto } from '../models';
import { ExecuteActionRequest } from '../models';
import { ExecuteActionResponse } from '../models';
import { StakingGetAllDelegationsResponse } from '../models';
import { StakingGetChainsResponse } from '../models';
import { StakingGetProvidersResponse } from '../models';
import { StakingGetSummaryByVaultResponse } from '../models';
/**
 * StakingBetaApi - axios parameter creator
 * @export
 */
export declare const StakingBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary
     * @param {ApproveTermsOfServiceByProviderIdProviderIdEnum} providerId The unique identifier of the staking provider
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTermsOfServiceByProviderId: (providerId: ApproveTermsOfServiceByProviderIdProviderIdEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Perform a chain-specific staking action (e.g. stake, unstake, withdraw).
     * @summary
     * @param {ExecuteActionRequest} executeActionRequest
     * @param {ExecuteActionChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;) to use
     * @param {ExecuteActionActionIdEnum} actionId The operation that can be executed on a vault/position
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeAction: (executeActionRequest: ExecuteActionRequest, chainDescriptor: ExecuteActionChainDescriptorEnum, actionId: ExecuteActionActionIdEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary
     * @param {string} [chainDescriptor] Use \&quot;ETH\&quot; / \&quot;SOL\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegations: (chainDescriptor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary
     * @param {GetChainInfoChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;) to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChainInfo: (chainDescriptor: GetChainInfoChainDescriptorEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChains: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary
     * @param {string} id The unique identifier of the staking position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegationById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return information on all the available staking providers.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviders: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummaryByVault: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StakingBetaApi - functional programming interface
 * @export
 */
export declare const StakingBetaApiFp: (configuration?: Configuration) => {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary
     * @param {ApproveTermsOfServiceByProviderIdProviderIdEnum} providerId The unique identifier of the staking provider
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTermsOfServiceByProviderId(providerId: ApproveTermsOfServiceByProviderIdProviderIdEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Perform a chain-specific staking action (e.g. stake, unstake, withdraw).
     * @summary
     * @param {ExecuteActionRequest} executeActionRequest
     * @param {ExecuteActionChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;) to use
     * @param {ExecuteActionActionIdEnum} actionId The operation that can be executed on a vault/position
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeAction(executeActionRequest: ExecuteActionRequest, chainDescriptor: ExecuteActionChainDescriptorEnum, actionId: ExecuteActionActionIdEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteActionResponse>>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary
     * @param {string} [chainDescriptor] Use \&quot;ETH\&quot; / \&quot;SOL\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegations(chainDescriptor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetAllDelegationsResponse>>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary
     * @param {GetChainInfoChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;) to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChainInfo(chainDescriptor: GetChainInfoChainDescriptorEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainInfoResponseDto>>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChains(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetChainsResponse>>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary
     * @param {string} id The unique identifier of the staking position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegationById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegationDto>>;
    /**
     * Return information on all the available staking providers.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetProvidersResponse>>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegationSummaryDto>>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummaryByVault(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetSummaryByVaultResponse>>;
};
/**
 * StakingBetaApi - factory interface
 * @export
 */
export declare const StakingBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary
     * @param {StakingBetaApiApproveTermsOfServiceByProviderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTermsOfServiceByProviderId(requestParameters: StakingBetaApiApproveTermsOfServiceByProviderIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;
    /**
     * Perform a chain-specific staking action (e.g. stake, unstake, withdraw).
     * @summary
     * @param {StakingBetaApiExecuteActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeAction(requestParameters: StakingBetaApiExecuteActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExecuteActionResponse>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary
     * @param {StakingBetaApiGetAllDelegationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegations(requestParameters?: StakingBetaApiGetAllDelegationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<StakingGetAllDelegationsResponse>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary
     * @param {StakingBetaApiGetChainInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChainInfo(requestParameters: StakingBetaApiGetChainInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainInfoResponseDto>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChains(options?: RawAxiosRequestConfig): AxiosPromise<StakingGetChainsResponse>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary
     * @param {StakingBetaApiGetDelegationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegationById(requestParameters: StakingBetaApiGetDelegationByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DelegationDto>;
    /**
     * Return information on all the available staking providers.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviders(options?: RawAxiosRequestConfig): AxiosPromise<StakingGetProvidersResponse>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary(options?: RawAxiosRequestConfig): AxiosPromise<DelegationSummaryDto>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummaryByVault(options?: RawAxiosRequestConfig): AxiosPromise<StakingGetSummaryByVaultResponse>;
};
/**
 * Request parameters for approveTermsOfServiceByProviderId operation in StakingBetaApi.
 * @export
 * @interface StakingBetaApiApproveTermsOfServiceByProviderIdRequest
 */
export interface StakingBetaApiApproveTermsOfServiceByProviderIdRequest {
    /**
     * The unique identifier of the staking provider
     * @type {'kiln' | 'figment'}
     * @memberof StakingBetaApiApproveTermsOfServiceByProviderId
     */
    readonly providerId: ApproveTermsOfServiceByProviderIdProviderIdEnum;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingBetaApiApproveTermsOfServiceByProviderId
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for executeAction operation in StakingBetaApi.
 * @export
 * @interface StakingBetaApiExecuteActionRequest
 */
export interface StakingBetaApiExecuteActionRequest {
    /**
     *
     * @type {ExecuteActionRequest}
     * @memberof StakingBetaApiExecuteAction
     */
    readonly executeActionRequest: ExecuteActionRequest;
    /**
     * The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;) to use
     * @type {'ETH' | 'SOL' | 'ETH_TEST3' | 'SOL_TEST'}
     * @memberof StakingBetaApiExecuteAction
     */
    readonly chainDescriptor: ExecuteActionChainDescriptorEnum;
    /**
     * The operation that can be executed on a vault/position
     * @type {'stake' | 'unstake' | 'withdraw'}
     * @memberof StakingBetaApiExecuteAction
     */
    readonly actionId: ExecuteActionActionIdEnum;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingBetaApiExecuteAction
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for getAllDelegations operation in StakingBetaApi.
 * @export
 * @interface StakingBetaApiGetAllDelegationsRequest
 */
export interface StakingBetaApiGetAllDelegationsRequest {
    /**
     * Use \&quot;ETH\&quot; / \&quot;SOL\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument.
     * @type {string}
     * @memberof StakingBetaApiGetAllDelegations
     */
    readonly chainDescriptor?: string;
}
/**
 * Request parameters for getChainInfo operation in StakingBetaApi.
 * @export
 * @interface StakingBetaApiGetChainInfoRequest
 */
export interface StakingBetaApiGetChainInfoRequest {
    /**
     * The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;) to use
     * @type {'ETH' | 'SOL' | 'ETH_TEST3' | 'SOL_TEST'}
     * @memberof StakingBetaApiGetChainInfo
     */
    readonly chainDescriptor: GetChainInfoChainDescriptorEnum;
}
/**
 * Request parameters for getDelegationById operation in StakingBetaApi.
 * @export
 * @interface StakingBetaApiGetDelegationByIdRequest
 */
export interface StakingBetaApiGetDelegationByIdRequest {
    /**
     * The unique identifier of the staking position
     * @type {string}
     * @memberof StakingBetaApiGetDelegationById
     */
    readonly id: string;
}
/**
 * StakingBetaApi - object-oriented interface
 * @export
 * @class StakingBetaApi
 * @extends {BaseAPI}
 */
export declare class StakingBetaApi extends BaseAPI {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary
     * @param {StakingBetaApiApproveTermsOfServiceByProviderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    approveTermsOfServiceByProviderId(requestParameters: StakingBetaApiApproveTermsOfServiceByProviderIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<object>>;
    /**
     * Perform a chain-specific staking action (e.g. stake, unstake, withdraw).
     * @summary
     * @param {StakingBetaApiExecuteActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    executeAction(requestParameters: StakingBetaApiExecuteActionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ExecuteActionResponse>>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary
     * @param {StakingBetaApiGetAllDelegationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    getAllDelegations(requestParameters?: StakingBetaApiGetAllDelegationsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetAllDelegationsResponse>>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary
     * @param {StakingBetaApiGetChainInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    getChainInfo(requestParameters: StakingBetaApiGetChainInfoRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ChainInfoResponseDto>>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    getChains(): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetChainsResponse>>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary
     * @param {StakingBetaApiGetDelegationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    getDelegationById(requestParameters: StakingBetaApiGetDelegationByIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<DelegationDto>>;
    /**
     * Return information on all the available staking providers.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    getProviders(): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetProvidersResponse>>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    getSummary(): Promise<import("../response/fireblocksResponse").FireblocksResponse<DelegationSummaryDto>>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingBetaApi
     */
    getSummaryByVault(): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetSummaryByVaultResponse>>;
}
/**
 * @export
 */
export declare const ApproveTermsOfServiceByProviderIdProviderIdEnum: {
    readonly Kiln: "kiln";
    readonly Figment: "figment";
};
export type ApproveTermsOfServiceByProviderIdProviderIdEnum = typeof ApproveTermsOfServiceByProviderIdProviderIdEnum[keyof typeof ApproveTermsOfServiceByProviderIdProviderIdEnum];
/**
 * @export
 */
export declare const ExecuteActionChainDescriptorEnum: {
    readonly Eth: "ETH";
    readonly Sol: "SOL";
    readonly EthTest3: "ETH_TEST3";
    readonly SolTest: "SOL_TEST";
};
export type ExecuteActionChainDescriptorEnum = typeof ExecuteActionChainDescriptorEnum[keyof typeof ExecuteActionChainDescriptorEnum];
/**
 * @export
 */
export declare const ExecuteActionActionIdEnum: {
    readonly Stake: "stake";
    readonly Unstake: "unstake";
    readonly Withdraw: "withdraw";
};
export type ExecuteActionActionIdEnum = typeof ExecuteActionActionIdEnum[keyof typeof ExecuteActionActionIdEnum];
/**
 * @export
 */
export declare const GetChainInfoChainDescriptorEnum: {
    readonly Eth: "ETH";
    readonly Sol: "SOL";
    readonly EthTest3: "ETH_TEST3";
    readonly SolTest: "SOL_TEST";
};
export type GetChainInfoChainDescriptorEnum = typeof GetChainInfoChainDescriptorEnum[keyof typeof GetChainInfoChainDescriptorEnum];
