/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CancelTransactionResponse } from '../models';
import { CreateTransactionResponse } from '../models';
import { DropTransactionRequest } from '../models';
import { DropTransactionResponse } from '../models';
import { EstimatedNetworkFeeResponse } from '../models';
import { EstimatedTransactionFeeResponse } from '../models';
import { FreezeTransactionResponse } from '../models';
import { GetTransactionsResponse } from '../models';
import { RescanTransactionRequest } from '../models';
import { SetConfirmationsThresholdRequest } from '../models';
import { SetConfirmationsThresholdResponse } from '../models';
import { TransactionRequest } from '../models';
import { TransactionResponse } from '../models';
import { UnfreezeTransactionResponse } from '../models';
import { ValidateAddressResponse } from '../models';
import { ValidatedTransactionsForRescanResponse } from '../models';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels a transaction by ID.
     * @summary Cancel a transaction
     * @param {string} txId The ID of the transaction to cancel
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTransaction: (txId: string, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new transaction.
     * @summary Create a new transaction
     * @param {TransactionRequest} [transactionRequest]
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransaction: (transactionRequest?: TransactionRequest, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Drops a stuck ETH transaction and creates a replacement transaction.
     * @summary Drop ETH transaction by ID
     * @param {string} txId The ID of the transaction
     * @param {DropTransactionRequest} [dropTransactionRequest]
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dropTransaction: (txId: string, dropTransactionRequest?: DropTransactionRequest, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.
     * @summary Estimate the required fee for an asset
     * @param {string} assetId The asset for which to estimate the fee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateNetworkFee: (assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).
     * @summary Estimate transaction fee
     * @param {TransactionRequest} [transactionRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateTransactionFee: (transactionRequest?: TransactionRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Freezes a transaction by ID.
     * @summary Freeze a transaction
     * @param {string} txId The ID of the transaction to freeze
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    freezeTransaction: (txId: string, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a transaction by ID.
     * @summary Find a specific transaction by Fireblocks transaction ID
     * @param {string} txId The ID of the transaction to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction: (txId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns transaction by external transaction ID.
     * @summary Find a specific transaction by external transaction ID
     * @param {string} externalTxId The external ID of the transaction to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionByExternalId: (externalTxId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists the transaction history for your workspace.
     * @summary List transaction history
     * @param {string} [before] Unix timestamp in milliseconds. Returns only transactions created before the specified date
     * @param {string} [after] Unix timestamp in milliseconds. Returns only transactions created after the specified date
     * @param {string} [status] You can filter by one of the statuses.
     * @param {GetTransactionsOrderByEnum} [orderBy] The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions.
     * @param {GetTransactionsSortEnum} [sort] The direction to order the results by
     * @param {number} [limit] Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
     * @param {GetTransactionsSourceTypeEnum} [sourceType] The source type of the transaction
     * @param {string} [sourceId] The source ID of the transaction
     * @param {GetTransactionsDestTypeEnum} [destType] The destination type of the transaction
     * @param {string} [destId] The destination ID of the transaction
     * @param {string} [assets] A list of assets to filter by, seperated by commas
     * @param {string} [txHash] Returns only results with a specified txHash
     * @param {string} [sourceWalletId] Returns only results where the source is a specific end user wallet
     * @param {string} [destWalletId] Returns only results where the destination is a specific end user wallet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions: (before?: string, after?: string, status?: string, orderBy?: GetTransactionsOrderByEnum, sort?: GetTransactionsSortEnum, limit?: number, sourceType?: GetTransactionsSourceTypeEnum, sourceId?: string, destType?: GetTransactionsDestTypeEnum, destId?: string, assets?: string, txHash?: string, sourceWalletId?: string, destWalletId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * rescan transaction by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit the amount of the transaction to 16 per request.
     * @summary rescan array of transactions
     * @param {RescanTransactionRequest} rescanTransactionRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanTransactionsBeta: (rescanTransactionRequest: RescanTransactionRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction hash.
     * @summary Set confirmation threshold by transaction hash
     * @param {string} txHash The TxHash
     * @param {SetConfirmationsThresholdRequest} [setConfirmationsThresholdRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setConfirmationThresholdByTransactionHash: (txHash: string, setConfirmationsThresholdRequest?: SetConfirmationsThresholdRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction ID.
     * @summary Set confirmation threshold by transaction ID
     * @param {string} txId The ID of the transaction
     * @param {SetConfirmationsThresholdRequest} [setConfirmationsThresholdRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTransactionConfirmationThreshold: (txId: string, setConfirmationsThresholdRequest?: SetConfirmationsThresholdRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unfreezes a transaction by ID and makes the transaction available again.
     * @summary Unfreeze a transaction
     * @param {string} txId The ID of the transaction to unfreeze
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfreezeTransaction: (txId: string, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Checks if an address is valid (for XRP, DOT, XLM, and EOS).
     * @summary Validate destination address
     * @param {string} assetId The asset of the address
     * @param {string} address The address to validate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateAddress: (assetId: string, address: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Cancels a transaction by ID.
     * @summary Cancel a transaction
     * @param {string} txId The ID of the transaction to cancel
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTransaction(txId: string, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTransactionResponse>>;
    /**
     * Creates a new transaction.
     * @summary Create a new transaction
     * @param {TransactionRequest} [transactionRequest]
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransaction(transactionRequest?: TransactionRequest, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransactionResponse>>;
    /**
     * Drops a stuck ETH transaction and creates a replacement transaction.
     * @summary Drop ETH transaction by ID
     * @param {string} txId The ID of the transaction
     * @param {DropTransactionRequest} [dropTransactionRequest]
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dropTransaction(txId: string, dropTransactionRequest?: DropTransactionRequest, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DropTransactionResponse>>;
    /**
     * Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.
     * @summary Estimate the required fee for an asset
     * @param {string} assetId The asset for which to estimate the fee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateNetworkFee(assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimatedNetworkFeeResponse>>;
    /**
     * Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).
     * @summary Estimate transaction fee
     * @param {TransactionRequest} [transactionRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateTransactionFee(transactionRequest?: TransactionRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimatedTransactionFeeResponse>>;
    /**
     * Freezes a transaction by ID.
     * @summary Freeze a transaction
     * @param {string} txId The ID of the transaction to freeze
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    freezeTransaction(txId: string, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FreezeTransactionResponse>>;
    /**
     * Returns a transaction by ID.
     * @summary Find a specific transaction by Fireblocks transaction ID
     * @param {string} txId The ID of the transaction to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(txId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>>;
    /**
     * Returns transaction by external transaction ID.
     * @summary Find a specific transaction by external transaction ID
     * @param {string} externalTxId The external ID of the transaction to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionByExternalId(externalTxId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>>;
    /**
     * Lists the transaction history for your workspace.
     * @summary List transaction history
     * @param {string} [before] Unix timestamp in milliseconds. Returns only transactions created before the specified date
     * @param {string} [after] Unix timestamp in milliseconds. Returns only transactions created after the specified date
     * @param {string} [status] You can filter by one of the statuses.
     * @param {GetTransactionsOrderByEnum} [orderBy] The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions.
     * @param {GetTransactionsSortEnum} [sort] The direction to order the results by
     * @param {number} [limit] Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
     * @param {GetTransactionsSourceTypeEnum} [sourceType] The source type of the transaction
     * @param {string} [sourceId] The source ID of the transaction
     * @param {GetTransactionsDestTypeEnum} [destType] The destination type of the transaction
     * @param {string} [destId] The destination ID of the transaction
     * @param {string} [assets] A list of assets to filter by, seperated by commas
     * @param {string} [txHash] Returns only results with a specified txHash
     * @param {string} [sourceWalletId] Returns only results where the source is a specific end user wallet
     * @param {string} [destWalletId] Returns only results where the destination is a specific end user wallet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions(before?: string, after?: string, status?: string, orderBy?: GetTransactionsOrderByEnum, sort?: GetTransactionsSortEnum, limit?: number, sourceType?: GetTransactionsSourceTypeEnum, sourceId?: string, destType?: GetTransactionsDestTypeEnum, destId?: string, assets?: string, txHash?: string, sourceWalletId?: string, destWalletId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransactionsResponse>>;
    /**
     * rescan transaction by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit the amount of the transaction to 16 per request.
     * @summary rescan array of transactions
     * @param {RescanTransactionRequest} rescanTransactionRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanTransactionsBeta(rescanTransactionRequest: RescanTransactionRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidatedTransactionsForRescanResponse>>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction hash.
     * @summary Set confirmation threshold by transaction hash
     * @param {string} txHash The TxHash
     * @param {SetConfirmationsThresholdRequest} [setConfirmationsThresholdRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setConfirmationThresholdByTransactionHash(txHash: string, setConfirmationsThresholdRequest?: SetConfirmationsThresholdRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetConfirmationsThresholdResponse>>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction ID.
     * @summary Set confirmation threshold by transaction ID
     * @param {string} txId The ID of the transaction
     * @param {SetConfirmationsThresholdRequest} [setConfirmationsThresholdRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTransactionConfirmationThreshold(txId: string, setConfirmationsThresholdRequest?: SetConfirmationsThresholdRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetConfirmationsThresholdResponse>>;
    /**
     * Unfreezes a transaction by ID and makes the transaction available again.
     * @summary Unfreeze a transaction
     * @param {string} txId The ID of the transaction to unfreeze
     * @param {string} [xEndUserWalletId] Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfreezeTransaction(txId: string, xEndUserWalletId?: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnfreezeTransactionResponse>>;
    /**
     * Checks if an address is valid (for XRP, DOT, XLM, and EOS).
     * @summary Validate destination address
     * @param {string} assetId The asset of the address
     * @param {string} address The address to validate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateAddress(assetId: string, address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateAddressResponse>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels a transaction by ID.
     * @summary Cancel a transaction
     * @param {TransactionsApiCancelTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTransaction(requestParameters: TransactionsApiCancelTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelTransactionResponse>;
    /**
     * Creates a new transaction.
     * @summary Create a new transaction
     * @param {TransactionsApiCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransaction(requestParameters?: TransactionsApiCreateTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateTransactionResponse>;
    /**
     * Drops a stuck ETH transaction and creates a replacement transaction.
     * @summary Drop ETH transaction by ID
     * @param {TransactionsApiDropTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dropTransaction(requestParameters: TransactionsApiDropTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DropTransactionResponse>;
    /**
     * Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.
     * @summary Estimate the required fee for an asset
     * @param {TransactionsApiEstimateNetworkFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateNetworkFee(requestParameters: TransactionsApiEstimateNetworkFeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EstimatedNetworkFeeResponse>;
    /**
     * Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).
     * @summary Estimate transaction fee
     * @param {TransactionsApiEstimateTransactionFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateTransactionFee(requestParameters?: TransactionsApiEstimateTransactionFeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<EstimatedTransactionFeeResponse>;
    /**
     * Freezes a transaction by ID.
     * @summary Freeze a transaction
     * @param {TransactionsApiFreezeTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    freezeTransaction(requestParameters: TransactionsApiFreezeTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<FreezeTransactionResponse>;
    /**
     * Returns a transaction by ID.
     * @summary Find a specific transaction by Fireblocks transaction ID
     * @param {TransactionsApiGetTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(requestParameters: TransactionsApiGetTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponse>;
    /**
     * Returns transaction by external transaction ID.
     * @summary Find a specific transaction by external transaction ID
     * @param {TransactionsApiGetTransactionByExternalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionByExternalId(requestParameters: TransactionsApiGetTransactionByExternalIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionResponse>;
    /**
     * Lists the transaction history for your workspace.
     * @summary List transaction history
     * @param {TransactionsApiGetTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions(requestParameters?: TransactionsApiGetTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetTransactionsResponse>;
    /**
     * rescan transaction by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit the amount of the transaction to 16 per request.
     * @summary rescan array of transactions
     * @param {TransactionsApiRescanTransactionsBetaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanTransactionsBeta(requestParameters: TransactionsApiRescanTransactionsBetaRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidatedTransactionsForRescanResponse>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction hash.
     * @summary Set confirmation threshold by transaction hash
     * @param {TransactionsApiSetConfirmationThresholdByTransactionHashRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setConfirmationThresholdByTransactionHash(requestParameters: TransactionsApiSetConfirmationThresholdByTransactionHashRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetConfirmationsThresholdResponse>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction ID.
     * @summary Set confirmation threshold by transaction ID
     * @param {TransactionsApiSetTransactionConfirmationThresholdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTransactionConfirmationThreshold(requestParameters: TransactionsApiSetTransactionConfirmationThresholdRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetConfirmationsThresholdResponse>;
    /**
     * Unfreezes a transaction by ID and makes the transaction available again.
     * @summary Unfreeze a transaction
     * @param {TransactionsApiUnfreezeTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfreezeTransaction(requestParameters: TransactionsApiUnfreezeTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnfreezeTransactionResponse>;
    /**
     * Checks if an address is valid (for XRP, DOT, XLM, and EOS).
     * @summary Validate destination address
     * @param {TransactionsApiValidateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateAddress(requestParameters: TransactionsApiValidateAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidateAddressResponse>;
};
/**
 * Request parameters for cancelTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiCancelTransactionRequest
 */
export interface TransactionsApiCancelTransactionRequest {
    /**
     * The ID of the transaction to cancel
     * @type {string}
     * @memberof TransactionsApiCancelTransaction
     */
    readonly txId: string;
    /**
     * Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @type {string}
     * @memberof TransactionsApiCancelTransaction
     */
    readonly xEndUserWalletId?: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiCancelTransaction
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiCreateTransactionRequest
 */
export interface TransactionsApiCreateTransactionRequest {
    /**
     *
     * @type {TransactionRequest}
     * @memberof TransactionsApiCreateTransaction
     */
    readonly transactionRequest?: TransactionRequest;
    /**
     * Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @type {string}
     * @memberof TransactionsApiCreateTransaction
     */
    readonly xEndUserWalletId?: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiCreateTransaction
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for dropTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiDropTransactionRequest
 */
export interface TransactionsApiDropTransactionRequest {
    /**
     * The ID of the transaction
     * @type {string}
     * @memberof TransactionsApiDropTransaction
     */
    readonly txId: string;
    /**
     *
     * @type {DropTransactionRequest}
     * @memberof TransactionsApiDropTransaction
     */
    readonly dropTransactionRequest?: DropTransactionRequest;
    /**
     * Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @type {string}
     * @memberof TransactionsApiDropTransaction
     */
    readonly xEndUserWalletId?: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiDropTransaction
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for estimateNetworkFee operation in TransactionsApi.
 * @export
 * @interface TransactionsApiEstimateNetworkFeeRequest
 */
export interface TransactionsApiEstimateNetworkFeeRequest {
    /**
     * The asset for which to estimate the fee
     * @type {string}
     * @memberof TransactionsApiEstimateNetworkFee
     */
    readonly assetId: string;
}
/**
 * Request parameters for estimateTransactionFee operation in TransactionsApi.
 * @export
 * @interface TransactionsApiEstimateTransactionFeeRequest
 */
export interface TransactionsApiEstimateTransactionFeeRequest {
    /**
     *
     * @type {TransactionRequest}
     * @memberof TransactionsApiEstimateTransactionFee
     */
    readonly transactionRequest?: TransactionRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiEstimateTransactionFee
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for freezeTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiFreezeTransactionRequest
 */
export interface TransactionsApiFreezeTransactionRequest {
    /**
     * The ID of the transaction to freeze
     * @type {string}
     * @memberof TransactionsApiFreezeTransaction
     */
    readonly txId: string;
    /**
     * Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @type {string}
     * @memberof TransactionsApiFreezeTransaction
     */
    readonly xEndUserWalletId?: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiFreezeTransaction
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for getTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetTransactionRequest
 */
export interface TransactionsApiGetTransactionRequest {
    /**
     * The ID of the transaction to return
     * @type {string}
     * @memberof TransactionsApiGetTransaction
     */
    readonly txId: string;
}
/**
 * Request parameters for getTransactionByExternalId operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetTransactionByExternalIdRequest
 */
export interface TransactionsApiGetTransactionByExternalIdRequest {
    /**
     * The external ID of the transaction to return
     * @type {string}
     * @memberof TransactionsApiGetTransactionByExternalId
     */
    readonly externalTxId: string;
}
/**
 * Request parameters for getTransactions operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetTransactionsRequest
 */
export interface TransactionsApiGetTransactionsRequest {
    /**
     * Unix timestamp in milliseconds. Returns only transactions created before the specified date
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly before?: string;
    /**
     * Unix timestamp in milliseconds. Returns only transactions created after the specified date
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly after?: string;
    /**
     * You can filter by one of the statuses.
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly status?: string;
    /**
     * The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions.
     * @type {'createdAt' | 'lastUpdated'}
     * @memberof TransactionsApiGetTransactions
     */
    readonly orderBy?: GetTransactionsOrderByEnum;
    /**
     * The direction to order the results by
     * @type {'ASC' | 'DESC'}
     * @memberof TransactionsApiGetTransactions
     */
    readonly sort?: GetTransactionsSortEnum;
    /**
     * Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
     * @type {number}
     * @memberof TransactionsApiGetTransactions
     */
    readonly limit?: number;
    /**
     * The source type of the transaction
     * @type {'VAULT_ACCOUNT' | 'EXCHANGE_ACCOUNT' | 'INTERNAL_WALLET' | 'EXTERNAL_WALLET' | 'CONTRACT' | 'FIAT_ACCOUNT' | 'NETWORK_CONNECTION' | 'COMPOUND' | 'UNKNOWN' | 'GAS_STATION' | 'END_USER_WALLET'}
     * @memberof TransactionsApiGetTransactions
     */
    readonly sourceType?: GetTransactionsSourceTypeEnum;
    /**
     * The source ID of the transaction
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly sourceId?: string;
    /**
     * The destination type of the transaction
     * @type {'VAULT_ACCOUNT' | 'EXCHANGE_ACCOUNT' | 'INTERNAL_WALLET' | 'EXTERNAL_WALLET' | 'CONTRACT' | 'FIAT_ACCOUNT' | 'NETWORK_CONNECTION' | 'COMPOUND' | 'ONE_TIME_ADDRESS' | 'END_USER_WALLET'}
     * @memberof TransactionsApiGetTransactions
     */
    readonly destType?: GetTransactionsDestTypeEnum;
    /**
     * The destination ID of the transaction
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly destId?: string;
    /**
     * A list of assets to filter by, seperated by commas
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly assets?: string;
    /**
     * Returns only results with a specified txHash
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly txHash?: string;
    /**
     * Returns only results where the source is a specific end user wallet
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly sourceWalletId?: string;
    /**
     * Returns only results where the destination is a specific end user wallet
     * @type {string}
     * @memberof TransactionsApiGetTransactions
     */
    readonly destWalletId?: string;
}
/**
 * Request parameters for rescanTransactionsBeta operation in TransactionsApi.
 * @export
 * @interface TransactionsApiRescanTransactionsBetaRequest
 */
export interface TransactionsApiRescanTransactionsBetaRequest {
    /**
     *
     * @type {RescanTransactionRequest}
     * @memberof TransactionsApiRescanTransactionsBeta
     */
    readonly rescanTransactionRequest: RescanTransactionRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiRescanTransactionsBeta
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for setConfirmationThresholdByTransactionHash operation in TransactionsApi.
 * @export
 * @interface TransactionsApiSetConfirmationThresholdByTransactionHashRequest
 */
export interface TransactionsApiSetConfirmationThresholdByTransactionHashRequest {
    /**
     * The TxHash
     * @type {string}
     * @memberof TransactionsApiSetConfirmationThresholdByTransactionHash
     */
    readonly txHash: string;
    /**
     *
     * @type {SetConfirmationsThresholdRequest}
     * @memberof TransactionsApiSetConfirmationThresholdByTransactionHash
     */
    readonly setConfirmationsThresholdRequest?: SetConfirmationsThresholdRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiSetConfirmationThresholdByTransactionHash
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for setTransactionConfirmationThreshold operation in TransactionsApi.
 * @export
 * @interface TransactionsApiSetTransactionConfirmationThresholdRequest
 */
export interface TransactionsApiSetTransactionConfirmationThresholdRequest {
    /**
     * The ID of the transaction
     * @type {string}
     * @memberof TransactionsApiSetTransactionConfirmationThreshold
     */
    readonly txId: string;
    /**
     *
     * @type {SetConfirmationsThresholdRequest}
     * @memberof TransactionsApiSetTransactionConfirmationThreshold
     */
    readonly setConfirmationsThresholdRequest?: SetConfirmationsThresholdRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiSetTransactionConfirmationThreshold
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for unfreezeTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiUnfreezeTransactionRequest
 */
export interface TransactionsApiUnfreezeTransactionRequest {
    /**
     * The ID of the transaction to unfreeze
     * @type {string}
     * @memberof TransactionsApiUnfreezeTransaction
     */
    readonly txId: string;
    /**
     * Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @type {string}
     * @memberof TransactionsApiUnfreezeTransaction
     */
    readonly xEndUserWalletId?: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TransactionsApiUnfreezeTransaction
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for validateAddress operation in TransactionsApi.
 * @export
 * @interface TransactionsApiValidateAddressRequest
 */
export interface TransactionsApiValidateAddressRequest {
    /**
     * The asset of the address
     * @type {string}
     * @memberof TransactionsApiValidateAddress
     */
    readonly assetId: string;
    /**
     * The address to validate
     * @type {string}
     * @memberof TransactionsApiValidateAddress
     */
    readonly address: string;
}
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     * Cancels a transaction by ID.
     * @summary Cancel a transaction
     * @param {TransactionsApiCancelTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    cancelTransaction(requestParameters: TransactionsApiCancelTransactionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CancelTransactionResponse>>;
    /**
     * Creates a new transaction.
     * @summary Create a new transaction
     * @param {TransactionsApiCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransaction(requestParameters?: TransactionsApiCreateTransactionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CreateTransactionResponse>>;
    /**
     * Drops a stuck ETH transaction and creates a replacement transaction.
     * @summary Drop ETH transaction by ID
     * @param {TransactionsApiDropTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    dropTransaction(requestParameters: TransactionsApiDropTransactionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<DropTransactionResponse>>;
    /**
     * Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.
     * @summary Estimate the required fee for an asset
     * @param {TransactionsApiEstimateNetworkFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    estimateNetworkFee(requestParameters: TransactionsApiEstimateNetworkFeeRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EstimatedNetworkFeeResponse>>;
    /**
     * Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).
     * @summary Estimate transaction fee
     * @param {TransactionsApiEstimateTransactionFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    estimateTransactionFee(requestParameters?: TransactionsApiEstimateTransactionFeeRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EstimatedTransactionFeeResponse>>;
    /**
     * Freezes a transaction by ID.
     * @summary Freeze a transaction
     * @param {TransactionsApiFreezeTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    freezeTransaction(requestParameters: TransactionsApiFreezeTransactionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<FreezeTransactionResponse>>;
    /**
     * Returns a transaction by ID.
     * @summary Find a specific transaction by Fireblocks transaction ID
     * @param {TransactionsApiGetTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransaction(requestParameters: TransactionsApiGetTransactionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TransactionResponse>>;
    /**
     * Returns transaction by external transaction ID.
     * @summary Find a specific transaction by external transaction ID
     * @param {TransactionsApiGetTransactionByExternalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionByExternalId(requestParameters: TransactionsApiGetTransactionByExternalIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TransactionResponse>>;
    /**
     * Lists the transaction history for your workspace.
     * @summary List transaction history
     * @param {TransactionsApiGetTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactions(requestParameters?: TransactionsApiGetTransactionsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetTransactionsResponse>>;
    /**
     * rescan transaction by running an async job. </br> **Note**: - These endpoints are currently in beta and might be subject to changes. - We limit the amount of the transaction to 16 per request.
     * @summary rescan array of transactions
     * @param {TransactionsApiRescanTransactionsBetaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    rescanTransactionsBeta(requestParameters: TransactionsApiRescanTransactionsBetaRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ValidatedTransactionsForRescanResponse>>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction hash.
     * @summary Set confirmation threshold by transaction hash
     * @param {TransactionsApiSetConfirmationThresholdByTransactionHashRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    setConfirmationThresholdByTransactionHash(requestParameters: TransactionsApiSetConfirmationThresholdByTransactionHashRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SetConfirmationsThresholdResponse>>;
    /**
     * Overrides the required number of confirmations for transaction completion by transaction ID.
     * @summary Set confirmation threshold by transaction ID
     * @param {TransactionsApiSetTransactionConfirmationThresholdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    setTransactionConfirmationThreshold(requestParameters: TransactionsApiSetTransactionConfirmationThresholdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SetConfirmationsThresholdResponse>>;
    /**
     * Unfreezes a transaction by ID and makes the transaction available again.
     * @summary Unfreeze a transaction
     * @param {TransactionsApiUnfreezeTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    unfreezeTransaction(requestParameters: TransactionsApiUnfreezeTransactionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<UnfreezeTransactionResponse>>;
    /**
     * Checks if an address is valid (for XRP, DOT, XLM, and EOS).
     * @summary Validate destination address
     * @param {TransactionsApiValidateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    validateAddress(requestParameters: TransactionsApiValidateAddressRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ValidateAddressResponse>>;
}
/**
 * @export
 */
export declare const GetTransactionsOrderByEnum: {
    readonly CreatedAt: "createdAt";
    readonly LastUpdated: "lastUpdated";
};
export type GetTransactionsOrderByEnum = typeof GetTransactionsOrderByEnum[keyof typeof GetTransactionsOrderByEnum];
/**
 * @export
 */
export declare const GetTransactionsSortEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type GetTransactionsSortEnum = typeof GetTransactionsSortEnum[keyof typeof GetTransactionsSortEnum];
/**
 * @export
 */
export declare const GetTransactionsSourceTypeEnum: {
    readonly VaultAccount: "VAULT_ACCOUNT";
    readonly ExchangeAccount: "EXCHANGE_ACCOUNT";
    readonly InternalWallet: "INTERNAL_WALLET";
    readonly ExternalWallet: "EXTERNAL_WALLET";
    readonly Contract: "CONTRACT";
    readonly FiatAccount: "FIAT_ACCOUNT";
    readonly NetworkConnection: "NETWORK_CONNECTION";
    readonly Compound: "COMPOUND";
    readonly Unknown: "UNKNOWN";
    readonly GasStation: "GAS_STATION";
    readonly EndUserWallet: "END_USER_WALLET";
};
export type GetTransactionsSourceTypeEnum = typeof GetTransactionsSourceTypeEnum[keyof typeof GetTransactionsSourceTypeEnum];
/**
 * @export
 */
export declare const GetTransactionsDestTypeEnum: {
    readonly VaultAccount: "VAULT_ACCOUNT";
    readonly ExchangeAccount: "EXCHANGE_ACCOUNT";
    readonly InternalWallet: "INTERNAL_WALLET";
    readonly ExternalWallet: "EXTERNAL_WALLET";
    readonly Contract: "CONTRACT";
    readonly FiatAccount: "FIAT_ACCOUNT";
    readonly NetworkConnection: "NETWORK_CONNECTION";
    readonly Compound: "COMPOUND";
    readonly OneTimeAddress: "ONE_TIME_ADDRESS";
    readonly EndUserWallet: "END_USER_WALLET";
};
export type GetTransactionsDestTypeEnum = typeof GetTransactionsDestTypeEnum[keyof typeof GetTransactionsDestTypeEnum];
