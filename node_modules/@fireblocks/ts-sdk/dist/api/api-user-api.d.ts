/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateAPIUser } from '../models';
import { GetAPIUsersResponse } from '../models';
/**
 * ApiUserApi - axios parameter creator
 * @export
 */
export declare const ApiUserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates Api user in your tenant
     * @summary Create Api user
     * @param {CreateAPIUser} [createAPIUser]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiUser: (createAPIUser?: CreateAPIUser, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Api users of your tenant
     * @summary Get Api users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiUsers: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApiUserApi - functional programming interface
 * @export
 */
export declare const ApiUserApiFp: (configuration?: Configuration) => {
    /**
     * Creates Api user in your tenant
     * @summary Create Api user
     * @param {CreateAPIUser} [createAPIUser]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiUser(createAPIUser?: CreateAPIUser, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get Api users of your tenant
     * @summary Get Api users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAPIUsersResponse>>;
};
/**
 * ApiUserApi - factory interface
 * @export
 */
export declare const ApiUserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates Api user in your tenant
     * @summary Create Api user
     * @param {ApiUserApiCreateApiUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiUser(requestParameters?: ApiUserApiCreateApiUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get Api users of your tenant
     * @summary Get Api users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiUsers(options?: RawAxiosRequestConfig): AxiosPromise<GetAPIUsersResponse>;
};
/**
 * Request parameters for createApiUser operation in ApiUserApi.
 * @export
 * @interface ApiUserApiCreateApiUserRequest
 */
export interface ApiUserApiCreateApiUserRequest {
    /**
     *
     * @type {CreateAPIUser}
     * @memberof ApiUserApiCreateApiUser
     */
    readonly createAPIUser?: CreateAPIUser;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ApiUserApiCreateApiUser
     */
    readonly idempotencyKey?: string;
}
/**
 * ApiUserApi - object-oriented interface
 * @export
 * @class ApiUserApi
 * @extends {BaseAPI}
 */
export declare class ApiUserApi extends BaseAPI {
    /**
     * Creates Api user in your tenant
     * @summary Create Api user
     * @param {ApiUserApiCreateApiUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiUserApi
     */
    createApiUser(requestParameters?: ApiUserApiCreateApiUserRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Get Api users of your tenant
     * @summary Get Api users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiUserApi
     */
    getApiUsers(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetAPIUsersResponse>>;
}
