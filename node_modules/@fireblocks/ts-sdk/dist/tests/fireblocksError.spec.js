"use strict";
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var fireblocksError_1 = require("../error/fireblocksError");
describe("Fireblocks Error Tests", function () {
    describe('HandleError tests', function () {
        it('Should return full fireblocks error when axios error schema is full', function () { return __awaiter(void 0, void 0, void 0, function () {
            var axiosError, res;
            return __generator(this, function (_a) {
                axiosError = new axios_1.AxiosError("Mocked error message 1", "BAD_REQUEST", {}, { url: "http://localhost:8080" }, {
                    data: { message: 'Mocked error message 2' },
                    status: 400,
                    statusText: "BAD_REQUEST",
                    headers: { "X-My-Header": "my-header-value" },
                    config: {},
                });
                res = (0, fireblocksError_1.handleError)(axiosError);
                expect(res).toBeInstanceOf(fireblocksError_1.FireblocksError);
                expect(res).toEqual({
                    message: "Mocked error message 2",
                    response: {
                        data: { message: 'Mocked error message 2' },
                        statusCode: 400,
                        headers: { "X-My-Header": "my-header-value" },
                    },
                    request: {
                        url: "http://localhost:8080"
                    },
                });
                return [2 /*return*/];
            });
        }); });
        it('Should return error with message when axios error missing response property', function () { return __awaiter(void 0, void 0, void 0, function () {
            var axiosError, res;
            return __generator(this, function (_a) {
                axiosError = new axios_1.AxiosError("Mocked error message 1", "BAD_REQUEST", {}, { url: "http://localhost:8080" }, undefined);
                res = (0, fireblocksError_1.handleError)(axiosError);
                expect(res).toBeInstanceOf(fireblocksError_1.FireblocksError);
                expect(res).toEqual({
                    message: "Mocked error message 1",
                    response: undefined,
                    request: {
                        url: "http://localhost:8080"
                    },
                });
                return [2 /*return*/];
            });
        }); });
        it('Should return error with message when axios error missing response and message properties', function () { return __awaiter(void 0, void 0, void 0, function () {
            var axiosError, res;
            return __generator(this, function (_a) {
                axiosError = new axios_1.AxiosError(undefined, "BAD_REQUEST", {}, undefined, undefined);
                res = (0, fireblocksError_1.handleError)(axiosError);
                expect(res).toBeInstanceOf(fireblocksError_1.FireblocksError);
                expect(res).toEqual({
                    message: "No response from server",
                    response: undefined,
                    request: undefined,
                });
                return [2 /*return*/];
            });
        }); });
        it('Should not convert error when error is not axios error', function () { return __awaiter(void 0, void 0, void 0, function () {
            var error, res;
            return __generator(this, function (_a) {
                error = new Error("Mocked error message 1");
                res = (0, fireblocksError_1.handleError)(error);
                expect(res).toBeInstanceOf(Error);
                expect(res).toEqual(error);
                return [2 /*return*/];
            });
        }); });
    });
});
//# sourceMappingURL=fireblocksError.spec.js.map