"use strict";
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var package_json_1 = require("../package.json");
var axiosManager_1 = require("../network/axiosManager");
var bearerTokenProvider_1 = require("../network/bearerTokenProvider");
// Mocking dependencies
jest.mock('../network/bearerTokenProvider', function () {
    return {
        BearerTokenProvider: jest.fn().mockImplementation(function () {
            return {
                getToken: jest.fn().mockReturnValue('mocked token'),
            };
        }),
    };
});
var mockAxiosRequestInterceptor;
var mockAxiosResponseInterceptor;
jest.mock('axios', function () {
    mockAxiosRequestInterceptor = jest.fn();
    mockAxiosResponseInterceptor = jest.fn();
    return {
        create: function () {
            return {
                interceptors: {
                    request: { eject: jest.fn(), use: mockAxiosRequestInterceptor },
                    response: { eject: jest.fn(), use: mockAxiosResponseInterceptor },
                },
            };
        },
    };
});
describe('AxiosManager Tests', function () {
    var axiosManager;
    beforeEach(function () {
        axiosManager = new axiosManager_1.AxiosManager('apiKey', 'secretKey');
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    describe('Constructor tests', function () {
        it('Should create an instance of BearerTokenProvider', function () {
            expect(bearerTokenProvider_1.BearerTokenProvider).toHaveBeenCalledWith('apiKey', 'secretKey');
        });
        it('Should set request interceptor', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(mockAxiosRequestInterceptor).toHaveBeenCalled();
                return [2 /*return*/];
            });
        }); });
        it('Should set response interceptor', function () {
            expect(mockAxiosResponseInterceptor).toHaveBeenCalled();
        });
    });
    describe('GetHeaders tests', function () {
        describe('Default', function () {
            it('Should return fireblocks headers as expected', function () {
                var config = { method: 'GET', url: 'http://example.com', data: {} };
                var headers = axiosManager.getHeaders(config);
                expect(headers).toEqual(expect.objectContaining({
                    'X-API-Key': 'apiKey',
                    'Authorization': 'Bearer mocked token',
                    'User-Agent': expect.stringContaining('fireblocks/sdk/typescript'),
                    'Content-Type': 'application/json'
                }));
            });
        });
        describe('UserAgent Header', function () {
            it('Should return user-agent header starting with package name when default configuration is used', function () {
                var config = { method: 'GET', url: 'http://example.com', data: {} };
                var headers = axiosManager.getHeaders(config);
                var isStartingWithPackageName = headers['User-Agent'].startsWith("fireblocks/sdk/typescript/".concat(package_json_1.version));
                expect(isStartingWithPackageName).toEqual(true);
            });
            it('Should return user-agent header with configured userAgent when userAgent option is used', function () {
                axiosManager = new axiosManager_1.AxiosManager('apiKey', 'secretKey', { userAgent: 'my-user-agent' });
                var config = { method: 'GET', url: 'http://example.com', data: {} };
                var headers = axiosManager.getHeaders(config);
                var isStartingWithInputUserAgent = headers['User-Agent'].startsWith('my-user-agent');
                expect(isStartingWithInputUserAgent).toEqual(true);
            });
            it('Should return headers when isAnonymousPlatform set to true', function () {
                axiosManager = new axiosManager_1.AxiosManager('apiKey', 'secretKey', { isAnonymousPlatform: true });
                var config = { method: 'GET', url: 'http://example.com', data: {} };
                var headers = axiosManager.getHeaders(config);
                expect(headers['User-Agent']).toEqual("fireblocks/sdk/typescript/".concat(package_json_1.version));
            });
        });
        describe('ApiKey Header', function () {
            it('Should return empty string when api key is missing', function () {
                axiosManager = new axiosManager_1.AxiosManager(undefined, 'secretKey');
                var config = { method: 'GET', url: 'http://example.com', data: {} };
                var headers = axiosManager.getHeaders(config);
                expect(headers['X-API-Key']).toEqual("");
            });
            it('Should return empty string when api key is empty string as well', function () {
                axiosManager = new axiosManager_1.AxiosManager("", 'secretKey');
                var config = { method: 'GET', url: 'http://example.com', data: {} };
                var headers = axiosManager.getHeaders(config);
                expect(headers['X-API-Key']).toEqual("");
            });
        });
    });
});
//# sourceMappingURL=axiosManager.spec.js.map