"use strict";
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = require("../client/client");
var api_1 = require("../api");
var configuration_1 = require("../configuration");
var mockApiUserApi;
var mockAssetsApi;
var mockAuditLogsApi;
var mockBlockchainsAssetsApi;
var mockComplianceApi;
var mockComplianceScreeningConfigurationApi;
var mockConsoleUserApi;
var mockContractInteractionsApi;
var mockContractTemplatesApi;
var mockContractsApi;
var mockCosignersBetaApi;
var mockDeployedContractsApi;
var mockExchangeAccountsApi;
var mockExternalWalletsApi;
var mockFiatAccountsApi;
var mockGasStationsApi;
var mockInternalWalletsApi;
var mockJobManagementApi;
var mockKeyLinkBetaApi;
var mockNFTsApi;
var mockNetworkConnectionsApi;
var mockOTABetaApi;
var mockOffExchangesApi;
var mockPaymentsPayoutApi;
var mockPolicyEditorBetaApi;
var mockResetDeviceApi;
var mockSmartTransferApi;
var mockStakingBetaApi;
var mockTokenizationApi;
var mockTransactionsApi;
var mockTravelRuleBetaApi;
var mockUserGroupsBetaApi;
var mockUsersApi;
var mockVaultsApi;
var mockWeb3ConnectionsApi;
var mockWebhooksApi;
var mockWhitelistIpAddressesApi;
var mockWorkspaceStatusBetaApi;
jest.mock('../api', function () {
    mockApiUserApi = jest.fn();
    mockAssetsApi = jest.fn();
    mockAuditLogsApi = jest.fn();
    mockBlockchainsAssetsApi = jest.fn();
    mockComplianceApi = jest.fn();
    mockComplianceScreeningConfigurationApi = jest.fn();
    mockConsoleUserApi = jest.fn();
    mockContractInteractionsApi = jest.fn();
    mockContractTemplatesApi = jest.fn();
    mockContractsApi = jest.fn();
    mockCosignersBetaApi = jest.fn();
    mockDeployedContractsApi = jest.fn();
    mockExchangeAccountsApi = jest.fn();
    mockExternalWalletsApi = jest.fn();
    mockFiatAccountsApi = jest.fn();
    mockGasStationsApi = jest.fn();
    mockInternalWalletsApi = jest.fn();
    mockJobManagementApi = jest.fn();
    mockKeyLinkBetaApi = jest.fn();
    mockNFTsApi = jest.fn();
    mockNetworkConnectionsApi = jest.fn();
    mockOTABetaApi = jest.fn();
    mockOffExchangesApi = jest.fn();
    mockPaymentsPayoutApi = jest.fn();
    mockPolicyEditorBetaApi = jest.fn();
    mockResetDeviceApi = jest.fn();
    mockSmartTransferApi = jest.fn();
    mockStakingBetaApi = jest.fn();
    mockTokenizationApi = jest.fn();
    mockTransactionsApi = jest.fn();
    mockTravelRuleBetaApi = jest.fn();
    mockUserGroupsBetaApi = jest.fn();
    mockUsersApi = jest.fn();
    mockVaultsApi = jest.fn();
    mockWeb3ConnectionsApi = jest.fn();
    mockWebhooksApi = jest.fn();
    mockWhitelistIpAddressesApi = jest.fn();
    mockWorkspaceStatusBetaApi = jest.fn();
    var actual = jest.requireActual('../api');
    return __assign(__assign({}, actual), { ApiUserApi: mockApiUserApi, AssetsApi: mockAssetsApi, AuditLogsApi: mockAuditLogsApi, BlockchainsAssetsApi: mockBlockchainsAssetsApi, ComplianceApi: mockComplianceApi, ComplianceScreeningConfigurationApi: mockComplianceScreeningConfigurationApi, ConsoleUserApi: mockConsoleUserApi, ContractInteractionsApi: mockContractInteractionsApi, ContractTemplatesApi: mockContractTemplatesApi, ContractsApi: mockContractsApi, CosignersBetaApi: mockCosignersBetaApi, DeployedContractsApi: mockDeployedContractsApi, ExchangeAccountsApi: mockExchangeAccountsApi, ExternalWalletsApi: mockExternalWalletsApi, FiatAccountsApi: mockFiatAccountsApi, GasStationsApi: mockGasStationsApi, InternalWalletsApi: mockInternalWalletsApi, JobManagementApi: mockJobManagementApi, KeyLinkBetaApi: mockKeyLinkBetaApi, NFTsApi: mockNFTsApi, NetworkConnectionsApi: mockNetworkConnectionsApi, OTABetaApi: mockOTABetaApi, OffExchangesApi: mockOffExchangesApi, PaymentsPayoutApi: mockPaymentsPayoutApi, PolicyEditorBetaApi: mockPolicyEditorBetaApi, ResetDeviceApi: mockResetDeviceApi, SmartTransferApi: mockSmartTransferApi, StakingBetaApi: mockStakingBetaApi, TokenizationApi: mockTokenizationApi, TransactionsApi: mockTransactionsApi, TravelRuleBetaApi: mockTravelRuleBetaApi, UserGroupsBetaApi: mockUserGroupsBetaApi, UsersApi: mockUsersApi, VaultsApi: mockVaultsApi, Web3ConnectionsApi: mockWeb3ConnectionsApi, WebhooksApi: mockWebhooksApi, WhitelistIpAddressesApi: mockWhitelistIpAddressesApi, WorkspaceStatusBetaApi: mockWorkspaceStatusBetaApi });
});
var mockedResponse = {
    data: 'Mocked data',
    status: 200,
    statusText: 'OK',
    headers: {},
    config: {},
};
var mockAxios;
jest.mock("../network/axiosManager", function () {
    mockAxios = {
        request: jest.fn(function (config) {
            return Promise.resolve(mockedResponse);
        }),
        defaults: jest.fn()
    };
    return {
        AxiosManager: jest.fn().mockReturnValue({
            axios: mockAxios
        })
    };
});
describe("Fireblocks Client Tests", function () {
    var fireblocks;
    beforeEach(function () {
        fireblocks = new client_1.Fireblocks({
            apiKey: "my-api-key",
            basePath: "http://mock-server",
            secretKey: "secretKey"
        });
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    describe('Fireblocks client construction tests', function () {
        it('Should construct Fireblocks client', function () {
            expect(fireblocks).toBeInstanceOf(client_1.Fireblocks);
        });
        it('Should throw an error when apiKey is not provided', function () {
            expect(function () {
                new client_1.Fireblocks({
                    basePath: "http://mock-server",
                    secretKey: "secretKey"
                });
            }).toThrowError("apiKey is required either in the configuration or as environment variable FIREBLOCKS_API_KEY");
        });
        it('Should throw an error when secretKey is not provided', function () {
            expect(function () {
                new client_1.Fireblocks({
                    apiKey: "my-api-key",
                    basePath: "http://mock-server"
                });
            }).toThrowError("secretKey is required either in the configuration or as environment variable FIREBLOCKS_SECRET_KEY");
        });
        it('Should throw an error when basePath is not provided', function () {
            expect(function () {
                new client_1.Fireblocks({
                    apiKey: "my-api-key",
                    secretKey: "secretKey"
                });
            }).toThrowError("basePath is required either in the configuration or as environment variable FIREBLOCKS_BASE_PATH");
        });
    });
    describe('Api getters tests', function () {
        var expectedConfig = new configuration_1.Configuration({ basePath: "http://mock-server" });
        it('Should return ApiUserApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.apiUser).toBeInstanceOf(api_1.ApiUserApi);
                expect(mockApiUserApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return AssetsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.assets).toBeInstanceOf(api_1.AssetsApi);
                expect(mockAssetsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return AuditLogsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.auditLogs).toBeInstanceOf(api_1.AuditLogsApi);
                expect(mockAuditLogsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return BlockchainsAssetsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.blockchainsAssets).toBeInstanceOf(api_1.BlockchainsAssetsApi);
                expect(mockBlockchainsAssetsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ComplianceApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.compliance).toBeInstanceOf(api_1.ComplianceApi);
                expect(mockComplianceApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ComplianceScreeningConfigurationApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.complianceScreeningConfiguration).toBeInstanceOf(api_1.ComplianceScreeningConfigurationApi);
                expect(mockComplianceScreeningConfigurationApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ConsoleUserApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.consoleUser).toBeInstanceOf(api_1.ConsoleUserApi);
                expect(mockConsoleUserApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ContractInteractionsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.contractInteractions).toBeInstanceOf(api_1.ContractInteractionsApi);
                expect(mockContractInteractionsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ContractTemplatesApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.contractTemplates).toBeInstanceOf(api_1.ContractTemplatesApi);
                expect(mockContractTemplatesApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ContractsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.contracts).toBeInstanceOf(api_1.ContractsApi);
                expect(mockContractsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return CosignersBetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.cosignersBeta).toBeInstanceOf(api_1.CosignersBetaApi);
                expect(mockCosignersBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return DeployedContractsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.deployedContracts).toBeInstanceOf(api_1.DeployedContractsApi);
                expect(mockDeployedContractsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ExchangeAccountsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.exchangeAccounts).toBeInstanceOf(api_1.ExchangeAccountsApi);
                expect(mockExchangeAccountsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ExternalWalletsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.externalWallets).toBeInstanceOf(api_1.ExternalWalletsApi);
                expect(mockExternalWalletsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return FiatAccountsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.fiatAccounts).toBeInstanceOf(api_1.FiatAccountsApi);
                expect(mockFiatAccountsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return GasStationsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.gasStations).toBeInstanceOf(api_1.GasStationsApi);
                expect(mockGasStationsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return InternalWalletsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.internalWallets).toBeInstanceOf(api_1.InternalWalletsApi);
                expect(mockInternalWalletsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return JobManagementApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.jobManagement).toBeInstanceOf(api_1.JobManagementApi);
                expect(mockJobManagementApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return KeyLinkBetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.keyLinkBeta).toBeInstanceOf(api_1.KeyLinkBetaApi);
                expect(mockKeyLinkBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return NFTsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.nfts).toBeInstanceOf(api_1.NFTsApi);
                expect(mockNFTsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return NetworkConnectionsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.networkConnections).toBeInstanceOf(api_1.NetworkConnectionsApi);
                expect(mockNetworkConnectionsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return OTABetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.otaBeta).toBeInstanceOf(api_1.OTABetaApi);
                expect(mockOTABetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return OffExchangesApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.offExchanges).toBeInstanceOf(api_1.OffExchangesApi);
                expect(mockOffExchangesApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return PaymentsPayoutApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.paymentsPayout).toBeInstanceOf(api_1.PaymentsPayoutApi);
                expect(mockPaymentsPayoutApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return PolicyEditorBetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.policyEditorBeta).toBeInstanceOf(api_1.PolicyEditorBetaApi);
                expect(mockPolicyEditorBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return ResetDeviceApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.resetDevice).toBeInstanceOf(api_1.ResetDeviceApi);
                expect(mockResetDeviceApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return SmartTransferApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.smartTransfer).toBeInstanceOf(api_1.SmartTransferApi);
                expect(mockSmartTransferApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return StakingBetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.stakingBeta).toBeInstanceOf(api_1.StakingBetaApi);
                expect(mockStakingBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return TokenizationApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.tokenization).toBeInstanceOf(api_1.TokenizationApi);
                expect(mockTokenizationApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return TransactionsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.transactions).toBeInstanceOf(api_1.TransactionsApi);
                expect(mockTransactionsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return TravelRuleBetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.travelRuleBeta).toBeInstanceOf(api_1.TravelRuleBetaApi);
                expect(mockTravelRuleBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return UserGroupsBetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.userGroupsBeta).toBeInstanceOf(api_1.UserGroupsBetaApi);
                expect(mockUserGroupsBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return UsersApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.users).toBeInstanceOf(api_1.UsersApi);
                expect(mockUsersApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return VaultsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.vaults).toBeInstanceOf(api_1.VaultsApi);
                expect(mockVaultsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return Web3ConnectionsApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.web3Connections).toBeInstanceOf(api_1.Web3ConnectionsApi);
                expect(mockWeb3ConnectionsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return WebhooksApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.webhooks).toBeInstanceOf(api_1.WebhooksApi);
                expect(mockWebhooksApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return WhitelistIpAddressesApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.whitelistIpAddresses).toBeInstanceOf(api_1.WhitelistIpAddressesApi);
                expect(mockWhitelistIpAddressesApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
        it('Should return WorkspaceStatusBetaApi', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(fireblocks.workspaceStatusBeta).toBeInstanceOf(api_1.WorkspaceStatusBetaApi);
                expect(mockWorkspaceStatusBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
                return [2 /*return*/];
            });
        }); });
    });
});
//# sourceMappingURL=client.spec.js.map