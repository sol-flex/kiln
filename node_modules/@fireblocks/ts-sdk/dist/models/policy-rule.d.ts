/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { PolicyRuleAmount } from './policy-rule-amount';
import { PolicyRuleAmountAggregation } from './policy-rule-amount-aggregation';
import { PolicyRuleAuthorizationGroups } from './policy-rule-authorization-groups';
import { PolicyRuleDesignatedSigners } from './policy-rule-designated-signers';
import { PolicyRuleDst } from './policy-rule-dst';
import { PolicyRuleOperators } from './policy-rule-operators';
import { PolicyRuleRawMessageSigning } from './policy-rule-raw-message-signing';
import { PolicyRuleSrc } from './policy-rule-src';
import { PolicySrcOrDestSubType } from './policy-src-or-dest-sub-type';
import { PolicySrcOrDestType } from './policy-src-or-dest-type';
/**
 * Policy rule which is enforced on transactions
 * @export
 * @interface PolicyRule
 */
export interface PolicyRule {
    /**
     * Policy rule type
     * @type {string}
     * @memberof PolicyRule
     */
    'type': PolicyRuleTypeEnum;
    /**
     * Defines what occurs when a transaction meets the rule\'s criteria * ALLOW - The transaction goes through and can be signed without requiring additional approvals * BLOCK - The transaction is automatically blocked * 2-TIER - Only these users or user groups can approve             If any of them reject the transaction before the required approval threshold is met, the transaction doesn\'t go through            The list of entities are set is \"authorizationGroups\" field
     * @type {string}
     * @memberof PolicyRule
     */
    'action': PolicyRuleActionEnum;
    /**
     * Defines the type of asset being transacted, options are * \"*\" - All assets * Specific asset
     * @type {string}
     * @memberof PolicyRule
     */
    'asset': string;
    /**
     * * USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset. * EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset. * NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.
     * @type {string}
     * @memberof PolicyRule
     */
    'amountCurrency': PolicyRuleAmountCurrencyEnum;
    /**
     * * SINGLE_TX - limit applies to a single transaction * TIMEFRAME - limit applies to all transactions within the defined time period
     * @type {string}
     * @memberof PolicyRule
     */
    'amountScope': PolicyRuleAmountScopeEnum;
    /**
     *
     * @type {PolicyRuleAmount}
     * @memberof PolicyRule
     */
    'amount': PolicyRuleAmount;
    /**
     * Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum. When the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.
     * @type {number}
     * @memberof PolicyRule
     */
    'periodSec': number;
    /**
     * (deprecated - replaced by \"operators\")  | Defines users who can initiate the type of transaction to which the rule applies. options are * \"*\" - All users are allowed * Specific User id
     * @type {string}
     * @memberof PolicyRule
     * @deprecated
     */
    'operator'?: string;
    /**
     *
     * @type {PolicyRuleOperators}
     * @memberof PolicyRule
     */
    'operators'?: PolicyRuleOperators;
    /**
     * Defines the type of transaction to which the rule applies.   * TRANSFER - Default. Transfers funds from one account to another   * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.   * APPROVE - Allows a smart contract to withdraw from a designated wallet.   * MINT - Perform a mint operation (increase supply) on a supported token   * BURN - Perform a burn operation (reduce supply) on a supported token   * SUPPLY - Use for DeFi to lend assets   * REDEEM - Use for DeFi to get lending back   * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.   * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.   * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.
     * @type {string}
     * @memberof PolicyRule
     */
    'transactionType'?: PolicyRuleTransactionTypeEnum;
    /**
     * (deprecated - replaced by \"designatedSigners\") Id representing the user who signs transactions that match a specific rule
     * @type {string}
     * @memberof PolicyRule
     * @deprecated
     */
    'designatedSigner'?: string;
    /**
     *
     * @type {PolicyRuleDesignatedSigners}
     * @memberof PolicyRule
     */
    'designatedSigners'?: PolicyRuleDesignatedSigners;
    /**
     * (deprecated - replaced by "src") source account type
     * @type {PolicySrcOrDestType}
     * @memberof PolicyRule
     * @deprecated
     */
    'srcType'?: PolicySrcOrDestType;
    /**
     * (deprecated - replaced by "src") source sub account type
     * @type {PolicySrcOrDestSubType}
     * @memberof PolicyRule
     * @deprecated
     */
    'srcSubType'?: PolicySrcOrDestSubType;
    /**
     * (deprecated - replaced by "src") source account id
     * @type {string}
     * @memberof PolicyRule
     * @deprecated
     */
    'srcId'?: string;
    /**
     *
     * @type {PolicyRuleSrc}
     * @memberof PolicyRule
     */
    'src'?: PolicyRuleSrc;
    /**
     * (deprecated - replaced by "dst") destination account type
     * @type {PolicySrcOrDestType}
     * @memberof PolicyRule
     * @deprecated
     */
    'dstType'?: PolicySrcOrDestType;
    /**
     * (deprecated - replaced by "dst") destination sub account type
     * @type {PolicySrcOrDestSubType}
     * @memberof PolicyRule
     * @deprecated
     */
    'dstSubType'?: PolicySrcOrDestSubType;
    /**
     * (deprecated - replaced by "dst") destination account id
     * @type {string}
     * @memberof PolicyRule
     * @deprecated
     */
    'dstId'?: string;
    /**
     *
     * @type {PolicyRuleDst}
     * @memberof PolicyRule
     */
    'dst'?: PolicyRuleDst;
    /**
     * Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both. By default, you can only transfer to an external address after itâ€™s whitelisted.   * WHITELISTED - Can only be sent to whitelisted addresses.   * ONE_TIME - Can only be sent to non-whitelisted external addresses.   * \"*\" - can be sent to whitelisted addresses or non-whitelisted external
     * @type {string}
     * @memberof PolicyRule
     */
    'dstAddressType'?: PolicyRuleDstAddressTypeEnum;
    /**
     * (deprecated - replaced by \"authorizationGroups\") Allowed entities which can approves a transaction
     * @type {Array<string>}
     * @memberof PolicyRule
     * @deprecated
     */
    'authorizers'?: Array<string>;
    /**
     * (deprecated - replaced by \"authorizationGroups\") Min amount of entities which are needed to approve a transaction
     * @type {number}
     * @memberof PolicyRule
     * @deprecated
     */
    'authorizersCount'?: number;
    /**
     *
     * @type {PolicyRuleAuthorizationGroups}
     * @memberof PolicyRule
     */
    'authorizationGroups'?: PolicyRuleAuthorizationGroups;
    /**
     *
     * @type {PolicyRuleAmountAggregation}
     * @memberof PolicyRule
     */
    'amountAggregation'?: PolicyRuleAmountAggregation;
    /**
     *
     * @type {PolicyRuleRawMessageSigning}
     * @memberof PolicyRule
     */
    'rawMessageSigning'?: PolicyRuleRawMessageSigning;
    /**
     * Applying this rule over APPROVE type transactions (can only be enabled when rule\'s transaction type is TRANSFER)
     * @type {boolean}
     * @memberof PolicyRule
     */
    'applyForApprove'?: boolean;
    /**
     * Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule\'s transaction type is CONTRACT_CALL)
     * @type {boolean}
     * @memberof PolicyRule
     */
    'applyForTypedMessage'?: boolean;
    /**
     * A unique id identifying the rule
     * @type {string}
     * @memberof PolicyRule
     */
    'externalDescriptor'?: string;
}
export declare const PolicyRuleTypeEnum: {
    readonly Transfer: "TRANSFER";
};
export type PolicyRuleTypeEnum = typeof PolicyRuleTypeEnum[keyof typeof PolicyRuleTypeEnum];
export declare const PolicyRuleActionEnum: {
    readonly Allow: "ALLOW";
    readonly Block: "BLOCK";
    readonly _2Tier: "2-TIER";
};
export type PolicyRuleActionEnum = typeof PolicyRuleActionEnum[keyof typeof PolicyRuleActionEnum];
export declare const PolicyRuleAmountCurrencyEnum: {
    readonly Usd: "USD";
    readonly Eur: "EUR";
    readonly Native: "NATIVE";
};
export type PolicyRuleAmountCurrencyEnum = typeof PolicyRuleAmountCurrencyEnum[keyof typeof PolicyRuleAmountCurrencyEnum];
export declare const PolicyRuleAmountScopeEnum: {
    readonly SingleTx: "SINGLE_TX";
    readonly Timeframe: "TIMEFRAME";
};
export type PolicyRuleAmountScopeEnum = typeof PolicyRuleAmountScopeEnum[keyof typeof PolicyRuleAmountScopeEnum];
export declare const PolicyRuleTransactionTypeEnum: {
    readonly Transfer: "TRANSFER";
    readonly ContractCall: "CONTRACT_CALL";
    readonly Approve: "APPROVE";
    readonly Mint: "MINT";
    readonly Burn: "BURN";
    readonly Supply: "SUPPLY";
    readonly Redeem: "REDEEM";
    readonly Stake: "STAKE";
    readonly Raw: "RAW";
    readonly TypedMessage: "TYPED_MESSAGE";
};
export type PolicyRuleTransactionTypeEnum = typeof PolicyRuleTransactionTypeEnum[keyof typeof PolicyRuleTransactionTypeEnum];
export declare const PolicyRuleDstAddressTypeEnum: {
    readonly Whitelisted: "WHITELISTED";
    readonly OneTime: "ONE_TIME";
    readonly Star: "*";
};
export type PolicyRuleDstAddressTypeEnum = typeof PolicyRuleDstAddressTypeEnum[keyof typeof PolicyRuleDstAddressTypeEnum];
