"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sunToTrx = exports.trxToSun = exports.fetToAfet = exports.tiaToUtia = exports.injToInj = exports.osmoToUosmo = exports.zetaToAzeta = exports.dydxToAdydx = exports.atomToUatom = exports.compressPublicKey = exports.getCosmosAddress = exports.basecroToCro = exports.uomToOm = exports.ukavaToKava = exports.usdcToUusdc = exports.uusdcToUsdc = exports.utiaToTia = exports.uosmoToOsmo = exports.btcToSat = exports.satToBtc = exports.uunitToUnit = exports.uatomToAtom = exports.planckToKsm = exports.planckToDot = exports.udydxToDydx = exports.mutezToXtz = exports.ufetToFet = exports.afetToFet = exports.uinjToInj = exports.uzetaToZeta = exports.croToBasecro = exports.omToUom = exports.kavaToUkava = exports.tonToNanoton = exports.nanotonToTon = exports.yoctoToNear = exports.lovelaceToAda = exports.xtzToMutez = exports.solToLamports = exports.lamportsToSol = exports.weiToPol = exports.weiToEth = void 0;
const bech32_1 = require("bech32");
const viem_1 = require("viem");
const weiToEth = (wei) => {
    return (0, viem_1.formatUnits)(wei, 18);
};
exports.weiToEth = weiToEth;
const weiToPol = (wei) => {
    return (0, viem_1.formatUnits)(wei, 18);
};
exports.weiToPol = weiToPol;
const lamportsToSol = (lamports) => {
    return (0, viem_1.formatUnits)(lamports, 9);
};
exports.lamportsToSol = lamportsToSol;
const solToLamports = (sol) => {
    return (0, viem_1.parseUnits)(sol, 9);
};
exports.solToLamports = solToLamports;
const xtzToMutez = (xtz) => {
    return (0, viem_1.parseUnits)(xtz, 6);
};
exports.xtzToMutez = xtzToMutez;
const lovelaceToAda = (lovelace) => {
    return (0, viem_1.formatUnits)(lovelace, 6);
};
exports.lovelaceToAda = lovelaceToAda;
const yoctoToNear = (yocto) => {
    return (0, viem_1.formatUnits)(yocto, 24);
};
exports.yoctoToNear = yoctoToNear;
const nanotonToTon = (nanoton) => {
    return (0, viem_1.formatUnits)(nanoton, 9);
};
exports.nanotonToTon = nanotonToTon;
const tonToNanoton = (ton) => {
    return (0, viem_1.parseUnits)(ton, 9);
};
exports.tonToNanoton = tonToNanoton;
const kavaToUkava = (kava) => {
    return (0, viem_1.parseUnits)(kava, 6);
};
exports.kavaToUkava = kavaToUkava;
const omToUom = (om) => {
    return (0, viem_1.parseUnits)(om, 6);
};
exports.omToUom = omToUom;
const croToBasecro = (cro) => {
    return (0, viem_1.parseUnits)(cro, 8);
};
exports.croToBasecro = croToBasecro;
const uzetaToZeta = (uzeta) => {
    return (0, viem_1.formatUnits)(uzeta, 6);
};
exports.uzetaToZeta = uzetaToZeta;
const uinjToInj = (uinj) => {
    return (0, viem_1.formatUnits)(uinj, 6);
};
exports.uinjToInj = uinjToInj;
const afetToFet = (afet) => {
    return (0, viem_1.formatUnits)(afet, 18);
};
exports.afetToFet = afetToFet;
const ufetToFet = (ufet) => {
    return (0, viem_1.formatUnits)(ufet, 6);
};
exports.ufetToFet = ufetToFet;
const mutezToXtz = (mutez) => {
    return (0, viem_1.formatUnits)(mutez, 6);
};
exports.mutezToXtz = mutezToXtz;
const udydxToDydx = (udydx) => {
    return (0, viem_1.formatUnits)(udydx, 6);
};
exports.udydxToDydx = udydxToDydx;
const planckToDot = (planck) => {
    return (0, viem_1.formatUnits)(planck, 10);
};
exports.planckToDot = planckToDot;
const planckToKsm = (planck) => {
    return (0, viem_1.formatUnits)(planck, 12);
};
exports.planckToKsm = planckToKsm;
const uatomToAtom = (uatom) => {
    return (0, viem_1.formatUnits)(uatom, 6);
};
exports.uatomToAtom = uatomToAtom;
const uunitToUnit = (uunit) => {
    return (0, viem_1.formatUnits)(uunit, 6);
};
exports.uunitToUnit = uunitToUnit;
const satToBtc = (sat) => {
    return (0, viem_1.formatUnits)(sat, 8);
};
exports.satToBtc = satToBtc;
const btcToSat = (btc) => {
    return (0, viem_1.parseUnits)(btc, 8);
};
exports.btcToSat = btcToSat;
const uosmoToOsmo = (uosmo) => {
    return (0, viem_1.formatUnits)(uosmo, 6);
};
exports.uosmoToOsmo = uosmoToOsmo;
const utiaToTia = (utia) => {
    return (0, viem_1.formatUnits)(utia, 6);
};
exports.utiaToTia = utiaToTia;
const uusdcToUsdc = (uusdc) => {
    return (0, viem_1.formatUnits)(uusdc, 6);
};
exports.uusdcToUsdc = uusdcToUsdc;
const usdcToUusdc = (usdc) => {
    return (0, viem_1.parseUnits)(usdc, 6);
};
exports.usdcToUusdc = usdcToUusdc;
const ukavaToKava = (ukava) => {
    return (0, viem_1.formatUnits)(ukava, 6);
};
exports.ukavaToKava = ukavaToKava;
const uomToOm = (uom) => {
    return (0, viem_1.formatUnits)(uom, 6);
};
exports.uomToOm = uomToOm;
const basecroToCro = (basecro) => {
    return (0, viem_1.formatUnits)(basecro, 8);
};
exports.basecroToCro = basecroToCro;
const getCosmosAddress = (pubkey, prefix) => {
    const compressed_pubkey = (0, exports.compressPublicKey)(pubkey);
    const hash = (0, viem_1.sha256)(Uint8Array.from(Buffer.from(compressed_pubkey, 'hex')));
    const raw_addr = (0, viem_1.ripemd160)(hash, 'bytes');
    return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords(raw_addr));
};
exports.getCosmosAddress = getCosmosAddress;
const compressPublicKey = (pubkey) => {
    const pub_key_buffer = new Uint8Array(Buffer.from(pubkey, 'hex'));
    if (pub_key_buffer.length !== 65)
        return pubkey;
    const x = pub_key_buffer.slice(1, 33);
    const y = pub_key_buffer.slice(33);
    const prefix = y[y.length - 1] & 1 ? '03' : '02';
    const compressed_key = Buffer.concat([new Uint8Array(Buffer.from(prefix, 'hex')), x]);
    return compressed_key.toString('hex');
};
exports.compressPublicKey = compressPublicKey;
const atomToUatom = (atom) => {
    return (0, viem_1.parseUnits)(atom, 6);
};
exports.atomToUatom = atomToUatom;
const dydxToAdydx = (dydx) => {
    return (0, viem_1.parseUnits)(dydx, 18);
};
exports.dydxToAdydx = dydxToAdydx;
const zetaToAzeta = (zeta) => {
    return (0, viem_1.parseUnits)(zeta, 18);
};
exports.zetaToAzeta = zetaToAzeta;
const osmoToUosmo = (osmo) => {
    return (0, viem_1.parseUnits)(osmo, 6);
};
exports.osmoToUosmo = osmoToUosmo;
const injToInj = (inj) => {
    return (0, viem_1.parseUnits)(inj, 18);
};
exports.injToInj = injToInj;
const tiaToUtia = (tia) => {
    return (0, viem_1.parseUnits)(tia, 6);
};
exports.tiaToUtia = tiaToUtia;
const fetToAfet = (fet) => {
    return (0, viem_1.parseUnits)(fet, 18);
};
exports.fetToAfet = fetToAfet;
const trxToSun = (trx) => {
    return (0, viem_1.parseUnits)(trx, 6);
};
exports.trxToSun = trxToSun;
const sunToTrx = (trx) => {
    return (0, viem_1.formatUnits)(trx, 6);
};
exports.sunToTrx = sunToTrx;
//# sourceMappingURL=utils.js.map